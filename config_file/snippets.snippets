priority -50

snippet end "endsnippet"
`!p snip.rv="endsnippet"`
endsnippet

snippet snip "snippet"
snippet $1 "$1"
$0
`!p snip.rv="endsnippet"`
endsnippet

snippet math "math_snippet"
context "math()"
snippet $1 "$1"
$0
`!p snip.rv="endsnippet"`
endsnippet

snippet rv "rv"
snip.rv = "$1"$0
endsnippet

snippet !p "!p"
\`!p $0 \`
endsnippet

snippet !v "!v"
\`!v $0 \`
endsnippet

snippet '(group|grou|gro|gr)(\d)?' "'group(\d)?'" wr
`!p snip.rv = f"match.group({match.group(2)})"`
endsnippet

# We use a little hack so that the snippet is expanded
# and parsed correctly
snippet usnip "Ultisnips snippet definition" b
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:Description}" ${3:b}
${0:${VISUAL}}
`!p snip.rv = "endsnippet"`
endsnippet

snippet global "Global snippet" b
`!p snip.rv = "global"` !p
${0:${VISUAL}}
`!p snip.rv = "endglobal"`
endsnippet

snippet vis "${VISUAL}" i
\$\{VISUAL${1:${2:default}${3:/transform/}}\}
endsnippet

# vim:ft=snippets:

#---------- python ----------
snippet if "If" i
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" i
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" i
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet try "Try / Except" i
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet for "for loop" i
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


