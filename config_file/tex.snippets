#defulat priority = 0 但是一旦设置会影响下面的所以snippet 直到设置一个新的 priority

#+====================== 目录 =========================+
#|------------------- 1. \CMD -------------------------|
#|------------------- 2. \CMD (alise) -----------------|
#|------------------- 3. \CMD{$1} (alise) -------------|
#|------------------- 4. \CMD{x} (alise) --------------|
#|------------------- 5. \begin $0 \end ---------------|
#|------------------- 6. *^{$1} -----------------------|
#|------------------- 7. *_{$1} -----------------------|
#|------------------- 8. *_{$1 -> $2} -----------------|
#|------------------- 9. *_{$1}^{$2} ------------------|
#|------------------- 10. 积分|累乘|累加 --------------|
#|------------------- 11. 符号 ------------------------|
#|------------------- 12. 文档控件 --------------------|
#|------------------- 13. 列表 ------------------------|
#|------------------- 14. $VISUAL ---------------------|
#|------------------- 15. 画图Tikz --------------------|
#|------------------- 16. 选项列表 --------------------|
#|------------------- 17. 公式命令 --------------------|
#|------------------- 18. 特殊格式 --------------------|
#|------------------- 19. 微积分 ----------------------|
#|------------------- 20. 概率论 ----------------------|
#|------------------- 21. 三角函数 --------------------|
#|------------------- 22. *($1) -----------------------|
#|------------------- 23. 调用函数 --------------------|
#|------------------- 24. Python Function -------------|
#|------------------- 25. VimTex API ------------------|
#|------------------- 26. Template --------------------|
#+====================== 目录 =========================+





#-------------------- 1. \CMD --------------------------
priority -200
context "math()"
snippet '(cap|cdot|cup|exists|equiv|eta|forall|theta|in|iff|mu|mp|neq|rho|phi|pi|pm|subset|sim|xi)' "all" r
`!p snip.rv = "\\" + match.group(1)` $0
endsnippet
#-------------------- 2. \CMD (alise) ------------------
priority 0
context "math()"
snippet '(\*|X|R|l\.\.\.|\.\.\.|~|al|bec|be|emp|inf|lam|qqu|qu|sig|so|sub|varphi)' "all_entensions" irw
`!p 
s = match.group(1)
if s == "...":
	s = "dots"
if s == "l...":
	s = "ldots"
elif s == "~":
	s = "sim"
elif s == "al":
	s = "alpha"
elif s == "be":
	s = "beta"
elif s == "bec":
	s = "because"
elif s == "emp":
	s = "empty"
elif s == "inf":
	s = "infty"
elif s == "lam":
	s = "lambda"
elif s == "qqu":
	s = "qquad"
elif s == "qu":
	s = "quad"
elif s == "sig":
	s = "sigma"
elif s == "so":
	s = "therefore"
elif s == "sub":
	s = "subset"
elif s == "*" :
	s = "cdot"
elif s == "X":
	s = "times"
elif s == "R":
	s = "mathbb{R}"
snip.rv = "\\" + s
` $0
endsnippet
#-------------------- 3. \CMD{$1} (alise) --------------
priority 1001
context "math()"
snippet '(dddx|ddx|del|lim|ln|sq|vec|vphi|bar|parl)' "argment_all" ir
`!p 
s = match.group(1)
if s == "del":
	s = "Delta"
elif s == "sq":
	s = "sqrt"
elif s == "vphi":
	s = "varphi"
elif s == "parl":
	s = "partial"
snip.rv = "\\" + s
`{$1}$0
endsnippet
#-------------------- 4. \CMD{x} (alise) ---------------
snippet '(del|ln|sq)(x|y|z)' "argment_x_all" ir
`!p 
s = match.group(1)
if s == "del":
	s = "Delta"
elif s == "sq":
	s = "sqrt"
snip.rv = "\\" + s
`{`!p snip.rv = match.group(2)`}$0
endsnippet
#-------------------- 5. \begin $0 \end ----------------
snippet beg "begin{} / end{}" i
\begin{$1}
${2:${VISUAL}}
\end{$1}
endsnippet

snippet '(solution|solu|sym|the|def|lem|example|exam|cor|remark|rema|property|proposition|prop|proof|warning)' "beg_entensions" irb
`!p 
s = match.group(1)
if s == "sym":
	s = "symbols"
elif s == "the":
	s = "theorem"
elif s == "def":
	s = "definition"
elif s == "prop":
	s = "proposition"
elif s == "lem":
	s = "lemma"
elif s == "exam":
	s = "example"
elif s == "cor":
	s = "corollary"
elif s == "solu":
	s = "solution"
elif s == "rema":
	s = "remark"
snip.rv = "\\begin{" + s + "}"`
	${1:${VISUAL}}$0
`!p snip.rv = "\\end{" + s + "}"` 
endsnippet

context "math()"
snippet cases "cases" i
\begin{cases} 
	${1:f(x) = x}  ${2:,& ${3:x > 0}} \\\
	${4:f(x) = x}  ${5:,& ${6:x < 0}}
\end{cases}
endsnippet

context "env("cases")"
snippet \\ "jump to next line" 
\\\
${1:f(x) = x}  ${2:,& ${3:x > 0}} \\\
endsnippet

snippet ali "ali"
\begin{align}
	`!p 
s = snip.v.text
if s != '':
	idx = s.find("=")
	idx2 = s.find("&")
	if idx != -1 and idx2 == -1:
			new_s = s[:idx] + " & " + s[idx:]
	elif idx == -1 and idx2 == -1:
			new_s = "& " + s
	else:
			new_s = s
	snip.rv = new_s + " \\\\"
`$0
\end{align}
endsnippet

snippet aligned "ali"
\[\begin{aligned}
	`!p 
s = snip.v.text
if s != '':
	idx = s.find("=")
	idx2 = s.find("&")
	if idx != -1 and idx2 == -1:
			new_s = s[:idx] + " & " + s[idx:]
	elif idx == -1 and idx2 == -1:
			new_s = "& " + s
	else:
			new_s = s
	snip.rv = new_s + " \\\\"
`$0
\end{aligned}\]
endsnippet

context "env("aligned")"
snippet \\ "jump to next line" 
\\\
&$1
endsnippet

context "env("align")"
snippet \\ "jump to next line" 
\\\
&$1
endsnippet

snippet box "box"
\begin{tcolorbox}
	$0
\end{tcolorbox}
endsnippet
#-------------------- 6. *^{$1} ----------------
context "math()"
snippet '([A-Za-z0-9]|\)|\}|\])srr' "x^{}" ir
`!p	snip.rv = match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9]|\)|\}|\])sr(\d{1,3}|x|n|m|\+|-)?' "x^{\d}" ir
`!p 
if match.group(2) is None:
	snip.rv = match.group(1) + "^{2}"
else:
	snip.rv = match.group(1) + "^{"+ match.group(2) +"}"
`$0
endsnippet
#-------------------- 7. *_{$1} ----------------
priority 0
context "math()"
snippet '(?!p|i|h)([A-Za-z])(\d{1,3}|n|k|j)' "x_{\d}" ir
`!p snip.rv = match.group(1) + "_{" +  match.group(2) + "}"`$0
endsnippet

context "math()"
snippet 'x(n|k|i|j|\d)(\+|-)(n|k|i|j|\d)' "x_{n+\d}" r
x_{`!p snip.rv = match.group(1) + match.group(2) + match.group(3)`}$0
endsnippet
#-------------------- 8. lims_{x -> 0} ----------------
context "math()"
snippet lims "lims" i
\lim\limits_{${1:x} \to ${2:0}}$0 
endsnippet

context "math()"
snippet limss "limss" i
\lim\limits_{\substack{${1:x} \to ${2:0} \\\ ${3:y} \to ${4:0}}}$0
endsnippet
#-------------------- 9. *_{$1}^{$2} ----------------
context "math()"
snippet log "log" i
\log_{${1:a}}^\{${2:b}\}$0
endsnippet

context "math()"
snippet C "C" i
C_{${1:n}}^\{${2:k}\}$0
endsnippet
#-------------------- 10. 积分|累乘|累加 ---------------
priority 1001
context "display_math()"
snippet int "int" i
\int $0
endsnippet

priority 1001
context "internel_math()"
snippet int "int" i
\dint $0
endsnippet

context "display_math()"
snippet ints "ints" i
\int_{${1:a}}^\{${2:b}\}$0
endsnippet

context "internel_math()"
snippet ints "ints" i
\dint_{${1:a}}^\{${2:b}\}$0
endsnippet

priority 3001
context "display_math()"
snippet '(sum|prod)' "sum|prod" ir
\\`!p snip.rv=match.group(1)`_{${1:j=0}}^{${2:k}}$0
endsnippet

priority 3001
context "internel_math()"
snippet '(sum|prod)' "sum|prod" ir
\\d`!p snip.rv=match.group(1)`_{${1:j=0}}^{${2:k}}$0
endsnippet
#-------------------- 11. 符号 -------------------------
snippet #! "#!"
%!TeX program = xelatex
endsnippet

context "math()"
snippet '(\(|\)|\||\[|\])\1' "\bigg left right ()[]{}" wr
`!p snip.rv = "\\bigg" + match.group(1)` $0
endsnippet

context "math()"
snippet '(\(\)|\[\]|\|\|)' "parent" iAr
`!p	snip.rv = match.group(1)[:1]` $1 `!p snip.rv = match.group(1)[1:]`$0
endsnippet

context "math()"
snippet \{} "\{\}" iA
\\{ $1 \\}$0
endsnippet

context "math()"
snippet 'ell(\d)' "ell" r
\ell_{`!p snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '(g|l)eq' "\geq" ir
\\`!p snip.rv = match.group(1)`eq $0
endsnippet

context "math()"
snippet  b| "bigg|_{a}^{b}" w
\bigg|_{$1}^{$2}$0
endsnippet

context "math()"
snippet '(-|=)?(-|=)>' "\right" irA
`!p 
if match.group(1) is None:
	if match.group(2) == '-':
		snip.rv = "\\rightarrow"
	else:
		snip.rv = "\\Rightarrow"
else:
	if match.group(2) == match.group(1):
		if match.group(2) == '-':
			snip.rv = "\\longrightarrow"
		else:
			snip.rv = "\\quad \\Longrightarrow \\quad"
` $0
endsnippet

context "math()"
snippet '<(-|=)' "\left" iAr
`!p 
if match.group(1) == '-':
	snip.rv = "\\leftarrow"
else:
	snip.rv = "\\Leftarrow"
` $0
endsnippet

context "math()"
snippet == "==" w
\xlongequal{~ ${1:\mbox{${2:洛}}} ~} $0
endsnippet

snippet ** "bold" i
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet `` "bold" i
\texttt{${1:${VISUAL}}}$0
endsnippet

snippet # "#" b
\section{$1}
endsnippet

snippet ## "##" b
\subsection{$1}
endsnippet

snippet ### "###" b
\subsubsection{$1}
endsnippet

snippet #### "####"
\paragraph{$1}
endsnippet

# ----------------------------------------
# 这里两个一样的原因是：1001是为了判断当前是否处于\dint_{}^{}内，如果处于该环境那么只能响应\frac ，反之其他的行间公式可以响应\frac ，即1000
priority 1001
context "show_display_frac()" 
snippet // "Fraction" i
\dfrac{$1}{$2}$0
endsnippet

priority 1000
context "internel_math()" 
snippet // "Fraction" i
\frac{$1}{$2}$0
endsnippet

context "display_math()"
snippet // "Fraction" i
\frac{$1}{$2}$0
endsnippet

priority 1001
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 2001
context "internel_math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\dfrac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# ----------------------------------------
# 这里两个一样的原因是：2002是为了判断当前是否处于\dint_{}^{}内，如果处于该环境那么只能响应\frac ，反之其他的行间公式可以响应\frac ，即2001
priority 2002
context "show_display_frac()" 
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\dfrac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 2001
context "internel_math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
# ----------------------------------------
priority 1001
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

#-------------------- 12. 文档控件 ---------------------
snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet subfigure "subfigure"
\begin{figure}[htp]
	\centering
	\begin{subfigure}{0.45\textwidth}
	\centering
	${1:% TODO }
	\caption{${3:figure1}}
	\end{subfigure}
	\hfill
	\begin{subfigure}{0.45\textwidth}
	\centering
	${2:% TODO}
	\caption{${4:figure2}}
	\end{subfigure}
	\caption{${5:Figure}}
\end{figure}
endsnippet

snippet minipage "minipage"
\noindent
\begin{minipage}{0.6\textwidth}
	${1:% TODO}
\end{minipage}\hfill 
\begin{minipage}{0.3\textwidth} 
	\centering
	${2:\begin{tikzpicture}[scale=0.7]
	$3
	\end{tikzpicture}}
\end{minipage}
endsnippet

context "env("minipage")"
snippet caption "caption" w
\captionof{figure}{${1:CationName}}
endsnippet

pre_expand "create_table(snip)"
snippet "tab(\d+\*\d+)" "Customizable table" br
endsnippet

snippet tab "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}

	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
		$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet '(longtable|long)' "longtable" rwb
%\newcolumntype{L}{>{\arraybackslash}p{5cm}}
\begin{longtable}{cc}
	%------------ Name ---------------
	\caption{${3:Sample}表}
	\label{tab:${4:${3/\W+/-/g}}} \\\
	%------------ Head ----------------
	\toprule
	\textbf{${1:Column1}} & \textbf{${2:Column2}} \\\
	\midrule
	\endfirsthead
	%---------- Breakable --------------
	\bottomrule()
	\multicolumn{2}{r}{续下页}
	\endfoot
	%------------ Bottom ---------------
	\bottomrule()
	\endlastfoot
	%------------- Main ----------------
	${5}            & ${6}         \\\ $0
\end{longtable}
endsnippet

context "env("longtable")"
snippet \\ "jump to next line" 
\\\
$1            & $2         \\\
endsnippet

snippet tabularx "tabularx" wb
\begin{tabularx}{\textwidth}{|X|X|}
	\hline
	$1 & $2 \\\ $0
	\hline
\end{tabularx}
endsnippet

context "env("tabularx")"
snippet \\ "jump to next line" 
\\\\
\hline
$1 & $2 \\\
endsnippet

snippet lst "lst"
\begin{figure}[htp]
	\centering
	\begin{lstlisting}[basicstyle=\small]
	${1:${VISUAL}}
	\end{lstlisting}
	\caption{$0}
\end{figure}
endsnippet
#-------------------- 13. 列表 -------------------------
context "envs(['enumerate','itemize','serialNumber'])"
snippet - "\item" b
\item ${1:${VISUAL}}
endsnippet

context "env("thebibliography")"
snippet - "\bibitem" 
\bibitem{${1:a}} ${2:作者}. \emph{${3:文献}}[M]. ${4:地点}:${5:出版社},${6:年份}.\url{${7:www.wiki.com}}
endsnippet

snippet it "\item"
\item ${1:${VISUAL}}
endsnippet

snippet '(item|enum|serial)' "list environment" r
`!p 
if match.group(1) == 'item':
	snip.rv = "\\begin{itemize}"
elif match.group(1) == 'enum':
	snip.rv = "\\begin{enumerate}"
else:
	snip.rv = "\\begin{serialNumber}"
``!p
if snip.v.text != "":
		text = snip.v.text
		paragraphs = re.split(r'\n\s*\n', text)
		for i, paragraph in enumerate(paragraphs):
				paragraph = paragraph.strip()
				if paragraph:
						paragraph = '  \item ' + paragraph
				paragraphs[i] = paragraph
		result = '\n\n'.join(paragraphs)
		snip.rv = result
`
	$0
`!p 
if match.group(1) == 'item':
	snip.rv = "\\end{itemize}"
elif match.group(1) == 'enum':
	snip.rv = "\\begin{enumerate}"
else:
	snip.rv = "\\end{serialNumber}"
`
endsnippet
#-------------------- 14. $VISUAL ----------------------
context "math()"
snippet dis "dis" i
\displaystyle{${VISUAL}$1}$0
endsnippet

context "math()"
snippet sout "sout" i
\sout{${VISUAL}$1}$0
endsnippet

context "math()"
snippet //( "()visual" iA
(${VISUAL})$0
endsnippet

#\textcolor{red/blue/green/black/white/cyan/magenta/yellow}{text}
snippet '//(red|gree|grey|blu|yel)' "textcolor" ir
\textcolor{`!p 
text = match.group(1)
if text == "gree":
	snip.rv = "green"
elif text == "blu":
	snip.rv = "blue"
elif text == "yel":
	snip.rv = "yellow"
else:
	snip.rv = text
`}{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet //v "frac_visual" iA
\\frac{${VISUAL}}{${1}}$0
endsnippet

snippet mb "\mbox" w
\mbox{${1:${VISUAL}}}
endsnippet

#-------------------- 15. 画图Tikz ---------------------
priority 1001
context "env("tikzpicture")"
snippet plot "Plot" w
\def\min{-10}
\def\max{10}
\begin{axis}[
	xlabel=$x$,ylabel=$f(x)$,
	xmin= \min, xmax= \max,
	ymin= \min, ymax= \max,
	axis lines = middle]
	\fill (0,0) node[above left] {$O$};

	\addplot[domain=\min:\max,thick,smooth,red]{$1};
\end{axis}
endsnippet

priority 1000
snippet plot "Plot" w
\begin{figure}[ht]
	\centering
	\begin{tikzpicture}
		\def\min{-10}
		\def\max{10}
		\begin{axis}[
			xlabel=$x$,ylabel=$f(x)$,
			xmin= \min, xmax= \max,
			ymin= \min, ymax= \max,
			axis lines = middle]
			\fill (0,0) node[above left] {$O$};

			\addplot[domain=\min:\max,thick,smooth,red]{$1};
		\end{axis}
	\end{tikzpicture}
	\caption{$2}
	\label{${3:$2}}
\end{figure}
endsnippet

context "env("tikzpicture")"
snippet '(var|val)' "Variable" r
\pgfmathsetmacro\\${1:val}{${2:1+1}};
endsnippet

context "env("tikzpicture")"
snippet 'for' "Variable" r
\foreach \x in {${1:0,1,...,10}} {
	$0
	}
endsnippet

context "env("tikzpicture")"
snippet line "line"
\addplot[thick] coordinates {(${1:x1},${2:y1}) (${3:x2},${4:y2})};
endsnippet

context "env("tikzpicture")"
snippet vec "vec"
\addplot[->] coordinates {(${1:x1},${2:y1}) (${3:x2},${4:y2})};
endsnippet

context "env("tikzpicture")"
snippet dash "dash"
\addplot[dashed] coordinates {(${1:x1},${2:y1}) (${3:x2},${4:y2})};
endsnippet

context "env("tikzpicture")"
snippet O "O"
\fill (0,0) node[above right] {$O$};
endsnippet

context "env("tikzpicture")"
snippet point "point"
\filldraw[red] (${1:x},${2:y}) circle (2pt) node[above right,black] {$($1,$2)$};
endsnippet

context "env("tikzpicture")"
snippet leg "legend"
\legend{$${1:y=f(x)}$}
endsnippet

context "env("tikzpicture")"
snippet '(func|add)' "function" r
\addplot[${1:domain=${2:-10:10},}smooth,red]{${3:2 * x}};
endsnippet

context "env("tikzpicture")"
snippet lab "label" 
\node at (${1:x},${2:y}) {$${3:z = a + bi}$};
endsnippet

context "env("axis")"
snippet xlab "xlab"
xticklabels={$2},
endsnippet

context "env("axis")"
snippet ylab "ylab"
yticklabels={$2},
endsnippet

#\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
context "env("tikzpicture")"
snippet node "Tikz node" w
\node(${3/\W+/-/g}) at (${1:x},${2:y}) {$${3:z = a + bi}$};
endsnippet

context "noenv("tikzpicture")"
snippet node "Tikz node" w
\begin{tikzpicture}
\node(${3/\W+/-/g}) at (${1:x},${2:y}) {$${3:z = a + bi}$};
\end{tikzpicture}
endsnippet

context "env("tikzpicture")"
snippet -- "\draw --"
\draw (${1:A}) -- (${2:B});
endsnippet

context "env("tikzpicture")"
snippet bezier "bezier"
\addplot [thick,smooth,tension=1.2] coordinates {(${1:0,1})(${2:2,2})(${3:3,1})};
endsnippet

context "env("tikzpicture")"
snippet empty "empty"
xtick=\empty,ytick=\empty
endsnippet
#-------------------- 16. 选项列表 ---------------------
snippet lab "\label" w
\label{${1|fig,tab,exa|}:${2:Name}}$0
endsnippet

snippet ref "ref" w
\\${1|figref,tabref,exaref|}{${1/ref//g}:${2:LableName}}$0
endsnippet

snippet ding "ding" w
\ding{${1|172,173,174,175,176|}} $0
endsnippet
#-------------------- 17. 公式命令 ---------------------
snippet mk "Math" i
$${1}$$0
endsnippet

snippet dm "Math"
\[
$1
\] $0
endsnippet

snippet mkk "display math"
\begin{equation}
	$0
\end{equation}
endsnippet

snippet equ "equation"
\begin{equation}
	${1:${VISUAL}}
\end{equation}
endsnippet

snippet mkka "display math aligned"
\begin{align}
& ${1} \\\\${0}
\end{align}
endsnippet
#-------------------- 18. 特殊格式 ---------------------
snippet up "\usepackage" b
\usepackage{${1:package}} ${0}
endsnippet

snippet selectOptions "\selectOptions"
\selectOptions{$1}{$2}{$3}{$4}$0
endsnippet

context "math()"
snippet '(max|min)' "'(max|min)'" r
`!p snip.rv = "\\" + match.group(1)`{\\{ ${1:a} , ${2:b} \\}}$0
endsnippet

context "math()"
snippet def "def"
def($1)$0
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet 'sq(\d)' "sqrt[\d]{}" r
\sqrt[`!p snip.rv = match.group(1)`]{$1}$0
endsnippet
#-------------------- 19. 微积分 -----------------------
context "math()"
snippet 'd(x|y|t|u|z)?' "dx" wr
`!p 
if match.group(1) is None:
	snip.rv = "\mathrm{d}"
else:
	snip.rv = "\mathrm{d}" + match.group(1)
`$0
endsnippet


context "math()"
snippet 'x(0)?,y(0)?' "(x,y)" wr
`!p
if match.group(1) is None:
	snip.rv = "(x,y)"
else:
	snip.rv = "(x_{0},y_{0})"
` $0
endsnippet

context "math()"
snippet 'fxy' "f(x,y)" wr
f(x,y)
endsnippet
#-------------------- 20. 概率论 -----------------------
context "math()" 
snippet P{} "P{}" i
P\\{ $1 \\}$0
endsnippet

context "math()"
snippet 'C(\d{0,3})-(\d{0,3})' "C_{\d}^{\d}'" r
`!p snip.rv = "C_{" + match.group(1) + "}^{" + match.group(2) + "}"`
endsnippet

context "math()"
snippet 'P([A-C]{1,3})' "'P(A)'" r
`!p snip.rv= "P(" + match.group(1) + ")"`
endsnippet

context "math()"
snippet 'P([A-C])\|([A-C])' "'P(A|B)'" r
`!p snip.rv= "P(" + match.group(1) + "|" + match.group(2) + ")"`
endsnippet

context "math()"
snippet Vert "\Vert" i
\Vert ${1} \Vert $0
endsnippet
#-------------------- 21. 三角函数 ---------------------
priority 2001
context "math()"
snippet '(a|ar|arc)?(sin|cos|tan|csc|sec|cot)(\d|n)?' "sin{}" ir
\\`!p 
one = match.group(1)
two = match.group(2)
thr = match.group(3)
if not one is None:
	s = "arc" + two
else:
	s = two
if not thr is None:
	s += "^{"+ thr +"}"
snip.rv = s
`{${1}}$0
endsnippet

priority 3001
context "math()"
snippet '(a|ar|arc)?(sin|cos|tan|csc|sec|cot)(\d|n)?(x|t)' "sin{x}" ir
\\`!p 
one = match.group(1)
two = match.group(2)
thr = match.group(3)
fou = match.group(4)
if not one is None:
	s = "arc" + two
else:
	s = two
if not thr is None:
	s += "^{"+ thr +"}"
snip.rv = s + "{" + fou + "}"
`$0
endsnippet
#-------------------- 22. *($1) ------------------------
context "math()"
snippet 'fgx' "f(g(x))" ir
f(g(x))$0
endsnippet

context "math()"
snippet 'f'gx' "f(g(x))" ir
f'(g(x))$0
endsnippet

priority 2001
context "math()"
snippet '([Ffguv])('{0,3})((?!r|f|F|p)([a-zX]|\d+))' "f(x)" ir
`!p snip.rv = match.group(1) + match.group(2) + "(" + match.group(3) + ")"`$0
endsnippet

context "math()"
snippet yx "y(x)" w
y(x)$0
endsnippet

context "math()"
snippet '(F|f|g|G)('|''|''')?x(\d|i|n)' "f(x_0)" ir
`!p 
tag = match.group(1)
one = match.group(2)
two = match.group(3)
if not one is None:
	tag += one
if two == "i":
	snip.rv = tag + "(\\xi)"
else:
	snip.rv = tag + "(x_{" + two + "})"
`$0
endsnippet

context "math()"
snippet 'f(x|k|i|j)(\+|-)(\d{1,3})' "f(x+\d)" r
f(`!p snip.rv = match.group(1) + match.group(2) + match.group(3)`)$0
endsnippet

priority 1001
context "math()"
snippet 'phi((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)' "\phi(x)" ir
\\phi(`!p snip.rv = match.group(1)`)$0
endsnippet

priority 2001
context "math()"
snippet 'varphi((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)' "\varphi(x)" ir
\\varphi(`!p snip.rv = match.group(1)`)$0
endsnippet

priority 2001
context "math()"
snippet 'vphi((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)' "\vphi(x)" ir
\\varphi(`!p snip.rv = match.group(1)`)$0
endsnippet
#-------------------- 23. 调用函数 ---------------------
context "math()"
pre_expand "create_matrix(snip)"
snippet '^mat(\d+\*\d+)' "matrix" r
endsnippet

context "math()"
pre_expand "create_matrix(snip,\"v\")"
snippet '^vmat(\d+\*\d+)' "matrix" r
endsnippet

context "math()"
pre_expand "create_matrix_middle(snip)"
snippet '.*\smat(\d)\*(\d)' "matrix_middle" r
endsnippet

context "math()"
pre_expand "create_matrix_middle(snip,\"v\")"
snippet '.*\svmat(\d)\*(\d)' "matrix_middle" r
endsnippet
#-------------------- 24. Python Function --------------
global !p
def create_table(snip):
	rows = snip.buffer[snip.line].split('*')[0]
	cols = snip.buffer[snip.line].split('*')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def create_matrix_middle(snip, types=0):
    flag = "mat"
    if (types == 0):
        types = "b"
    if (types == "v"):
        flag = "vmat"
    rows = int(match.group(1))
    columns = int(match.group(2))
    old_str = snip.buffer[snip.line]
    snip.buffer[snip.line] = ''
    old_str = old_str.replace(flag+str(rows)+"*"+str(columns), "")
# make matrix
    body = ""
    anon_befor = "\\begin{"+types+"matrix} "
    for row in range(1, rows+1):
        body += ' & '.join(['$' + str(row*columns+col)
                           for col in range(1, columns+1)]) + "\\\\\\\\"
    anon_end = " \end{"+types+"matrix}"
    snip.expand_anon(old_str + anon_befor + body + anon_end)


def create_matrix(snip, types=0):
    strLen = 3
    if (types == "b"):
        strLen = 4
    elif (types == "v"):
        strLen = 4
    else:
        types = "b"
    lists = snip.buffer[snip.line].strip()[strLen:].split("*", 1)
    snip.buffer[snip.line] = ''
    rows = int(lists[0])
    columns = int(lists[1])
    anon_befor = "\\begin{"+types+"matrix}\n"
    body = ""
    for row in range(1, rows+1):
        body += ' & '.join(['$' + str(row*columns+col)
                           for col in range(1, columns+1)]) + "\\\\\\\n"
    anon_end = "\end{"+types+"matrix}"
    snip.expand_anon(anon_befor + body + anon_end)

def show_display_frac():
	if internel_math():
		linebuf = vim.eval("getline('.')")
		# 检查是否为行间公式的积分上下界时的触发
		index = int(vim.eval("col('.')"))
		#print(str(linebuf[:index]))
		# TODO 这里判断有点模糊还需要进一步修改 <23-09-25 22:00:02, Yangdatong> 
		if re.match(r'.*\\dint_{(.*?)}$',str(linebuf[:index])) \
		or re.match(r'.*\\dint_{(.*?)}\^{//}$',str(linebuf[:index])):
			return False
		return True
	else:
		return False
endglobal
#-------------------- 25. VimTex API -------------------
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def internel_math():
    if math():
        linebuf = vim.eval("getline('.')")
        index = int(vim.eval("col('.')-1"))
        count_before = linebuf[:index].count('$')
        count_after = linebuf[index:].count('$')
        # print(str(linebuf) + " <-----> " + str(count_before)+"|"+str(count_after))
        if (count_after == 0 and count_before == 0):# or (count_after % 2 == 0 and count_before % 2 == 0):
            return False
        return True
    else:
        return False

def display_math():
		return math() and (not internel_math())

def env(name):
    [x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and y != '0'

def noenv(name):
    [x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x == '0' and y == '0'

def envs(names):
		for name in names:
			[x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
			if x != '0' and y != '0':
				return True
		return False


#"""在字符串中的中文前后添加标识符"""
def add_chinese_tags(snip,flag):
	text = snip.buffer[snip.line][:-len(flag)]
	snip.buffer[snip.line] = ''
	pattern = r'([\u4e00-\u9fa5]+)'  # 匹配中文字符的正则表达式
	replacement = r'\\text{\1}'  # 替换模式，使用\mbox{}包裹中文字符
	result = re.sub(pattern, replacement, text)
	snip.expand_anon(result + '$1')

#"""在字符串中的math前后添加标识符"""
def add_math_tags(snip,flag):
	text = snip.buffer[snip.line][:-len(flag)]
	snip.buffer[snip.line] = ''
	#result = re.sub(r'[^a-zA-Z\u4e00-\u9fa5\s]+', lambda x: f'${x.group()}$', text)
	snip.expand_anon(result + '$1')

#"""判断最后i个字符是否为中文字符"""
def is_end_chinese_character(flag):
	linebuf = vim.eval("getline('.')")[:-len(flag)]
	char = linebuf[-1]
	if '\u4e00' <= char <= '\u9fa5':
		return True
	else:
		return False

#"""判断是否为中文字符"""
def is_chinese_character(flag):
	if not math():
		return False
	linebuf = vim.eval("getline('.')")[:-len(flag)]
	pattern = re.compile(r'[\u4e00-\u9fa5]')
	result = re.search(pattern, linebuf)
	if result:
		return True
	else:
		return False
endglobal

#|------------------- 26. Template --------------------|
snippet 'main|template|temp' "Template" r
%!TeX program = xelatex
`!p 
# 创建一个包含所有路径的列表
paths_to_check = [
    os.getcwd(),  # 当前工作目录
    os.path.dirname(os.getcwd()),  # 上一层目录
    os.path.join(os.path.expanduser("~"), ""),  # 桌面目录
    os.path.join(os.path.expanduser("~"), "Desktop"),  # 桌面目录
    os.path.join(os.path.expanduser("~"), "Documents"),  # 文档目录
    os.path.join(os.path.expanduser("~"), "Downloads"),  # 下载文件夹目录
    os.path.join(os.path.expanduser("~"), "Desktop/study/Math"),  # 常用目录
]

# 待检测的文件名
file_to_check = "ctexmath.cls"

# 遍历每个路径并检测文件是否存在
is_live = 0
for path in paths_to_check:
	file_path = os.path.join(path, file_to_check)
	if os.path.exists(file_path):
		print(f"检测到 '{file_to_check}' 存在于路径: {path}")
		is_live = 1
		break
if is_live == 1:
	snip.rv = "\documentclass{" + path + "/ctexmath}"
else:
	snip.rv = """\documentclass{ctexmath}"""
`
%--------------------------------- Head -------------------------------------
\title{`!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`}
\author{\textcopyright Yang-datong }
\date{`!v strftime("%Y-%m-%d %H:%M")`}

\begin{document}
\makehead
%--------------------------------- Body -------------------------------------
$0

%--------------------------------- Reference --------------------------------
\newpage
\begin{thebibliography}{1}
	\bibitem{a} 作者. \emph{文献}[M]. 地点:出版社,年份.\url{www.google.com}
\end{thebibliography}

\end{document}
endsnippet
#snippet i "mark" "re.match('(?:\${1,2})(.*?)\\1{1,2}$', snip.buffer[snip.line])" e
