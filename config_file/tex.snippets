#defulat priority = 0 但是一旦设置会影响下面的所以snippet 直到设置一个新的 priority

global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'


def internel_math():
    if math():
        linebuf = vim.eval("getline('.')")
        index = int(vim.eval("col('.')-1"))
        count_before = linebuf[:index].count('$')
        count_after = linebuf[index:].count('$')
        # print(str(linebuf) + " <-----> " + str(count_before)+"|"+str(count_after))
        if (count_after == 0 and count_before == 0):# or (count_after % 2 == 0 and count_before % 2 == 0):
            return False
        return True
    else:
        return False

def display_math():
		return math() and (not internel_math())

def env(name):
    [x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and y != '0'

#"""在字符串中的中文前后添加标识符"""
def add_chinese_tags(snip,flag):
	text = snip.buffer[snip.line][:-len(flag)]
	snip.buffer[snip.line] = ''
	pattern = r'([\u4e00-\u9fa5]+)'  # 匹配中文字符的正则表达式
	replacement = r'\\text{\1}'  # 替换模式，使用\mbox{}包裹中文字符
	result = re.sub(pattern, replacement, text)
	snip.expand_anon(result + '$1')

#"""在字符串中的math前后添加标识符"""
def add_math_tags(snip,flag):
	text = snip.buffer[snip.line][:-len(flag)]
	snip.buffer[snip.line] = ''
	#result = re.sub(r'[^a-zA-Z\u4e00-\u9fa5\s]+', lambda x: f'${x.group()}$', text)
	snip.expand_anon(result + '$1')

#"""判断最后i个字符是否为中文字符"""
def is_end_chinese_character(flag):
	linebuf = vim.eval("getline('.')")[:-len(flag)]
	char = linebuf[-1]
	if '\u4e00' <= char <= '\u9fa5':
		return True
	else:
		return False

#"""判断是否为中文字符"""
def is_chinese_character(flag):
	if not math():
		return False
	linebuf = vim.eval("getline('.')")[:-len(flag)]
	pattern = re.compile(r'[\u4e00-\u9fa5]')
	result = re.search(pattern, linebuf)
	if result:
		return True
	else:
		return False


endglobal

#==================== Latex ====================
#配置规则: 带有括号的结束符在括号旁边，不带有括号的结束符空格一个
context "math()"
snippet 'd(x|y|t|u)?' "dx" wr
`!p 
if match.group(1) is None:
	snip.rv = "\mathrm{d}"
else:
	snip.rv = "\mathrm{d}" + match.group(1)
`$0
endsnippet

# 数学环境下中文需要mbox的解决
# TODO 还有点问题 <23-09-19 20:38:39, Yangdatong> 
#context "is_chinese_character('.mbox')"
#pre_expand "add_chinese_tags(snip,'.mbox')"
#snippet .mbox ".mbox" i
#endsnippet

# 数学环境下中文需要text的解决
#context "is_chinese_character('.text')"
#pre_expand "add_chinese_tags(snip,'.text')"
#snippet .text ".text" i
#endsnippet

# 使用场景：复制了一段带有公式的文字段落
# TODO 有问题 <23-09-19 20:39:03, YangJing> #
#pre_expand "add_math_tags(snip,'.math')"
#snippet .math ".math" i
#endsnippet

snippet selectOptions "\selectOptions"
\selectOptions{$1}{$2}{$3}{$4}$0
endsnippet

snippet ding "ding" w
\ding{${1|172,173,174,175,176|}} $0
endsnippet

snippet #! "#!"
%!TeX program = xelatex
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet subfigure "subfigure"
\begin{figure}[htp]
	\centering
	\begin{subfigure}{0.45\textwidth}
	\centering
	${1:% TODO }
	\caption{${3: figure1}}
	\end{subfigure}
	\hfill
	\begin{subfigure}{0.45\textwidth}
	\centering
	${2:% TODO}
	\caption{${4: figure2}}
	\end{subfigure}
	\caption{${5: Figure}}
\end{figure}
endsnippet

snippet minipage "minipage"
\noindent
\begin{minipage}{0.6\textwidth}
	\quad \quad ${1:% TODO}
\end{minipage}
\hfill 
\begin{minipage}{0.4\textwidth} 
	\centering
	${2:\begin{tikzpicture}[scale=0.7]
	$3
	\end{tikzpicture}}
\end{minipage}
endsnippet

pre_expand "create_table(snip)"
snippet "tab(\d+\*\d+)" "Customizable table" br
endsnippet

snippet tab "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}

	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
		$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet '(longtable|long)' "longtable" rwb
%\newcolumntype{L}{>{\arraybackslash}p{5cm}}
\begin{longtable}{cc}
	%------------ Name ---------------
	\caption{${3:Sample}表}
	\label{tab:${4:${3/\W+/-/g}}} \\\
	%------------ Head ----------------
	\toprule
	\textbf{${1:Column1}} & \textbf{${2:Column2}} \\\
	\midrule
	\endfirsthead
	%---------- Breakable --------------
	\bottomrule()
	\multicolumn{2}{r}{续下页}
	\endfoot
	%------------ Bottom ---------------
	\bottomrule()
	\endlastfoot
	%------------- Main ----------------
	${5}            & ${6}         \\\ $0
\end{longtable}
endsnippet

context "env("longtable")"
snippet \\ "jump to next line" 
\\\
$1            & $2         \\\
endsnippet

snippet tabularx "tabularx" wb
\begin{tabularx}{\textwidth}{|X|X|}
	\hline
	$1 & $2 \\\ $0
	\hline
\end{tabularx}
endsnippet

context "env("tabularx")"
snippet \\ "jump to next line" 
\\\\
\hline
$1 & $2 \\\
endsnippet

snippet it "\item"
\item ${1:${VISUAL}}
endsnippet

# Itemize
snippet item "itemize environment"
\begin{itemize}
`!p 
# 如果段落非空，则在首字母处添加 " \item"
if snip.v.text != "":
		text = snip.v.text
		paragraphs = re.split(r'\n\s*\n', text)
		for i, paragraph in enumerate(paragraphs):
				paragraph = paragraph.strip()
				if paragraph:
						paragraph = '  \item ' + paragraph
				paragraphs[i] = paragraph
		result = '\n\n'.join(paragraphs)
		snip.rv = result
	`$0
\end{itemize}
endsnippet

context "env("itemize")"
snippet - "\item" 
\item ${1:${VISUAL}}
endsnippet

# Enumerate
snippet enum "enumerate environment"
\begin{enumerate}
`!p 
# 如果段落非空，则在首字母处添加 " \item"
if snip.v.text != "":
		text = snip.v.text
		paragraphs = re.split(r'\n\s*\n', text)
		for i, paragraph in enumerate(paragraphs):
				paragraph = paragraph.strip()
				if paragraph:
						paragraph = '  \item ' + paragraph
				paragraphs[i] = paragraph
		result = '\n\n'.join(paragraphs)
		snip.rv = result
	`$0
\end{enumerate}
endsnippet

snippet enuma "enumerate environment"
\begin{enumerate}[(a)]
  \item ${0}
\end{enumerate}
endsnippet

snippet serial "serial environment"
\begin{serialNumber}
  \item ${0}
\end{serialNumber}
endsnippet

context "env("serialNumber")"
snippet - "\item" 
\item ${1:${VISUAL}}
endsnippet

snippet enumi "enumerate environment"
\begin{enumerate}[(i)]
  \item ${0}
\end{enumerate}
endsnippet

context "env("enumerate")"
snippet - "\item" 
\item ${1:${VISUAL}}
endsnippet

context "env("thebibliography")"
snippet - "\bibitem" 
\bibitem{${1:a}} ${2:作者}. \emph{${3:文献}}[M]. ${4:地点}:${5:出版社},${6:年份}.\url{${7:www.wiki.com}}
endsnippet

snippet lab "\label" w
\label{${1:fig:}${2:figureName}}$0
endsnippet

snippet ref "~\ref" w
~\ref{${1:fig:}${2:figureName}}$0
endsnippet

snippet figref "~\ref" w
\figref{${1:fig:}${2:figureName}}$0
endsnippet

snippet tabref "~\ref" w
\tabref{${1:fig:}${2:figureName}}$0
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

#newcommand
snippet nc "\newcommand" b
\newcommand{\\${1:cmd}}[${2:opt}]{${3:realcmd}} ${0}
#usepackage
endsnippet

snippet up "\usepackage" b
\usepackage{${1:package}} ${0}
endsnippet

snippet mb "\mbox" w
\mbox{${1:${VISUAL}}}
endsnippet

snippet lst "lst"
\begin{figure}[htp]
	\centering
	\begin{lstlisting}[basicstyle=\small]
	${1:${VISUAL}}
	\end{lstlisting}
	\caption{$0}
\end{figure}
endsnippet

#snippet box "Box"
#`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
#│ $1 │
#`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
#$0
#endsnippet

snippet box "box"
\begin{tcolorbox}
	$0
\end{tcolorbox}
endsnippet

snippet plot "Plot" w
\begin{figure}[ht]
	\newcommand{\size}{10}
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= -\size, xmax= \size,
			ymin= -\size, ymax = \size,
			axis lines = middle]
			\addplot[domain=-\size:\size,smooth,red]{$1};
			\fill (0,0) node[above right] {$O$};
		\end{axis}
	\end{tikzpicture}
	\caption{$2}
	\label{${3:$2}}
\end{figure}
endsnippet

context "env("tikzpicture")"
snippet var "Variable"
\pgfmathsetmacro\\${1:var}{${2:1+1}};
endsnippet

context "env("tikzpicture")"
snippet line "line"
\addplot[thick] coordinates {(${1:x1},${2:y1}) (${3:x2},${4:y2})};
endsnippet

context "env("tikzpicture")"
snippet vec "vec"
\addplot[->] coordinates {(${1:x1},${2:y1}) (${3:x2},${4:y2})};
endsnippet

context "env("tikzpicture")"
snippet dash "dash"
\addplot[dashed] coordinates {(${1:x1},${2:y1}) (${3:x2},${4:y2})};
endsnippet

context "env("tikzpicture")"
snippet O "O"
\fill (0,0) node[above right] {$O$};
endsnippet

context "env("tikzpicture")"
snippet point "point"
\filldraw[red] (${1:x},${2:y}) circle (2pt) node[above right,black] {$($1,$2)$};
endsnippet

context "env("tikzpicture")"
snippet leg "legend"
\legend{$${1:y=f(x)}$}
endsnippet

context "env("tikzpicture")"
snippet '(func|add)' "function" r
\addplot[${1:domain=${2:-10:10},}smooth,red]{${3:2 * x}};
endsnippet

context "env("tikzpicture")"
snippet lab "label" 
\node at (${1:x},${2:y}) {$${3:z = a + bi}$};
endsnippet

snippet node "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

#-------------------- 类markdown --------------------
snippet ** "bold" i
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet `` "bold" i
\texttt{${1:${VISUAL}}}$0
endsnippet

snippet # "#" b
\section{$1}
endsnippet

snippet ## "##" b
\subsection{$1}
endsnippet

snippet ### "###" b
\subsubsection{$1}
endsnippet

snippet #### "####"
\paragraph{$1}
endsnippet

#-------------------- 简单的规则 --------------------
context "math()"
snippet '(\*|X|R)' "*"  ir
`!p
if match.group(1) == "*" :
	snip.rv = "\\cdot"
elif match.group(1) == "X":
	snip.rv = "\\times"
elif match.group(1) == "R":
	snip.rv = "\\mathbb{R}"
` $0
endsnippet

priority -200
context "math()"
snippet '(cap|cdot|cup|exists|equiv|eta|forall|theta|in|iff|mu|neq|phi|pi|pm|sim|xi)' "all" r
`!p snip.rv = "\\" + match.group(1)` $0
endsnippet

priority 0
context "math()"
snippet '(\.\.\.|~|al|bec|be|emp|inf|lam|qqu|qu|sig|so|sub|varphi)' "all_entensions" ir
`!p 
s = match.group(1)
if s == "...":
	s = "dots"
elif s == "~":
	s = "sim"
elif s == "al":
	s = "alpha"
elif s == "be":
	s = "beta"
elif s == "bec":
	s = "because"
elif s == "emp":
	s = "empty"
elif s == "inf":
	s = "infty"
elif s == "lam":
	s = "lambda"
elif s == "qqu":
	s = "qquad"
elif s == "qu":
	s = "quad"
elif s == "sig":
	s = "sigma"
elif s == "so":
	s = "therefore"
elif s == "sub":
	s = "subset"
#elif s == "vphi":
#	s = "varphi"
snip.rv = "\\" + s
` $0
endsnippet

#begin，end
snippet '(kai|solution|solu|sym|the|def|lem|example|exam|cor|remark|rema|property|prop|proposition|proof|warning)' "beg_entensions" irb
`!p 
s = match.group(1)
if s == "sym":
	s = "symbols"
elif s == "the":
	s = "theorem"
elif s == "def":
	s = "definition"
elif s == "lem":
	s = "lemma"
elif s == "exam":
	s = "example"
elif s == "cor":
	s = "corollary"
elif s == "solu":
	s = "solution"
elif s == "rema":
	s = "remark"
snip.rv = "\\begin{" + s + "}"
`
	${1:${VISUAL}}$0
`!p snip.rv = "\\end{" + s + "}"` 
endsnippet


#-------------------- 参数的规则 --------------------
priority 1001
context "math()"
snippet '(dddx|ddx|del|lim|ln|sq|vec|vphi)' "argment_all" ir
`!p 
s = match.group(1)
if s == "del":
	s = "Delta"
elif s == "sq":
	s = "sqrt"
elif s == "vphi":
	s = "varphi"
snip.rv = "\\" + s
`{$1}$0
endsnippet

snippet 'sq(\d)' "sqrt[\d]{}" r
\sqrt[`!p snip.rv = match.group(1)`]{$1}$0
endsnippet

snippet '(del|ln|sq)(x|y)' "argment_x_all" ir
`!p 
s = match.group(1)
if s == "del":
	s = "Delta"
elif s == "sq":
	s = "sqrt"
snip.rv = "\\" + s
`{`!p snip.rv = match.group(2)`}$0
endsnippet

#-------------------- 多个参数规则 --------------------
#概率论用的比较频繁
context "math()" 
snippet P{} "P{}" i
P\\{ $1 \\}$0
endsnippet

priority 3001
context "math()"
snippet '(sum|prod)' "sum|prod" ir
\\`!p snip.rv=match.group(1)`_{${1:j=0}}^{${2:k}}$0
endsnippet

context "math()"
snippet lims "lims" i
\lim\limits_{${1:x} \to ${2:0}}$0 
endsnippet

context "math()"
snippet log "log" i
\log_{${1:a}}^\{${2:b}\}$0
endsnippet

context "math()"
snippet C "C" i
C_{${1:n}}^\{${2:k}\}$0
endsnippet


context "display_math()"
snippet int "int" i
\int $0
endsnippet

context "internel_math()"
snippet int "int" i
\dint $0
endsnippet

context "display_math()"
snippet ints "ints" i
\int_{${1:a}}^\{${2:b}\}$0
endsnippet

context "internel_math()"
snippet ints "ints" i
\dint_{${1:a}}^\{${2:b}\}$0
endsnippet

context "math()"
snippet Vert "\Vert" i
\Vert ${1} \Vert $0
endsnippet

context "math()"
snippet def "def"
def($1)$0
endsnippet

#-------------------- 符号的规则 --------------------
context "math()"
snippet '(\(\)|\[\]|\|\|)' "parent" iAr
`!p	snip.rv = match.group(1)[:1]` $1 `!p snip.rv = match.group(1)[1:]`$0
endsnippet

context "math()"
snippet \{} "\{\}" iA
\\{ $1 \\}$0
endsnippet

context "math()"
snippet '(-)?->' "\right" irA
`!p 
if match.group(1) is None:
	snip.rv = "\\rightarrow"
else:
	snip.rv = "\\longrightarrow"
` $0
endsnippet

context "math()"
snippet '(=)?=>' "\Right" irA
`!p 
if match.group(1) is None:
	snip.rv = "\\Rightarrow"
else:
	snip.rv = "\\quad \\Longrightarrow \\quad"
` $0
endsnippet

context "math()"
snippet == "==" w
\xlongequal{~ ${1:\mbox{洛}} ~} $0
endsnippet

context "math()"
snippet <- "\left" iA
\leftarrow $0
endsnippet

context "math()"
snippet <= "\Left" iA
\Leftarrow $0
endsnippet

#-------------------- 公式的规则 --------------------
#snippet mk "Math" i
#$${1}$`!p
#if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
#    snip.rv = ' '
#else:
#    snip.rv = ''
#`${2}
#endsnippet

snippet mk "Math" i
$${1}$$0
endsnippet

snippet dm "Math"
\[
$1
\] $0
endsnippet

snippet mkk "display math"
\begin{equation}
	$0
\end{equation}
endsnippet

#context "env("proof")"
#snippet mkk "display math"
#$$
#	$0
#$$
#endsnippet

snippet equ "equation"
\begin{equation}
	${1:${VISUAL}}
\end{equation}
endsnippet

snippet mkka "display math aligned"
\begin{align}
& ${1} \\\\${0}
\end{align}
endsnippet

#-------------------- 套件的规则 --------------------
snippet beg "begin{} / end{}" i
\begin{$1}
${2:${VISUAL}}
\end{$1}
endsnippet

#context "display_math()"
context "math()"
snippet cases "cases" i
\begin{cases} 
	${1:f(x) = x}  ${2:,& ${3:x > 0}} \\\
	${4:f(x) = x}  ${5:,& ${6:x < 0}}
\end{cases}
endsnippet

context "env("cases")"
snippet \\ "jump to next line" 
\\\
${1:f(x) = x}  ${2:,& ${3:x > 0}} \\\
endsnippet

snippet ali "ali"
`!p 
s = snip.v.text
idx = s.find("=")
idx2 = s.find("&")
if idx != -1 and idx2 == -1:
    new_s = s[:idx] + " & " + s[idx:]
elif idx == -1 and idx2 == -1:
    new_s = "& " + s
else:
    new_s = s
snip.rv = "\\begin{align}\n" + new_s + " \\\\"
`$0
\end{align}
endsnippet

context "env("aligned")"
snippet \\ "jump to next line" 
\\\
& $1
endsnippet

context "env("align")"
snippet \\ "jump to next line" 
\\\
& $1
endsnippet
#-------------------- VISUAL --------------------
context "math()"
snippet dis "dis" i
\displaystyle{${VISUAL}$1}$0
endsnippet

context "math()"
snippet sout "sout" i
\sout{${VISUAL}$1}$0
endsnippet

context "math()"
snippet //( "()visual" iA
(${VISUAL})$0
endsnippet

#\textcolor{red/blue/green/black/white/cyan/magenta/yellow}{text}
snippet '//(red|gree|grey|blu|yel)' "textcolor" ir
\textcolor{`!p 
text = match.group(1)
if text == "gree":
	snip.rv = "green"
elif text == "blu":
	snip.rv = "blue"
elif text == "yel":
	snip.rv = "yellow"
else:
	snip.rv = text
`}{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet //v "frac_visual" iA
\\frac{${VISUAL}}{${1}}$0
endsnippet

context "internel_math()"
snippet // "Fraction" i
\dfrac{$1}{$2}$0
endsnippet

context "display_math()"
snippet // "Fraction" i
\frac{$1}{$2}$0
endsnippet

priority 1001
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 2001
context "internel_math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\dfrac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

#================== 正则 ==================
#---------- 概率论 ----------
context "math()"
snippet 'C(\d{0,3})-(\d{0,3})' "C_{\d}^{\d}'" r
`!p snip.rv = "C_{" + match.group(1) + "}^{" + match.group(2) + "}"`
endsnippet

context "math()"
snippet 'P([A-C]{1,3})' "'P(A)'" r
`!p snip.rv= "P(" + match.group(1) + ")"`
endsnippet

context "math()"
snippet 'P([A-C])\|([A-C])' "'P(A|B)'" r
`!p snip.rv= "P(" + match.group(1) + "|" + match.group(2) + ")"`
endsnippet

#---------- 符号 ----------
context "math()"
snippet 'ell(\d)' "ell" r
\ell_{`!p snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '(g|l)eq' "\geq" ir
\\`!p snip.rv = match.group(1)`eq $0
endsnippet

#snippet i "mark" "re.match('(?:\${1,2})(.*?)\\1{1,2}$', snip.buffer[snip.line])" e
context "math()"
snippet '(\(|\)|\||\[|\])\1' "\bigg left right ()[]{}" wr
`!p snip.rv = "\\bigg" + match.group(1)` $0
endsnippet

#---------- 上下标 ----------
context "math()"
snippet '([A-Za-z]|\)|\}|\])srr' "x^{}" ir
`!p	snip.rv = match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z]|\)|\}|\])sr(\d{1,3}|x|n|m|\+|-)?' "x^{\d}" ir
`!p 
if match.group(2) is None:
	snip.rv = match.group(1) + "^{2}"
else:
	snip.rv = match.group(1) + "^{"+ match.group(2) +"}"
`$0
endsnippet

priority 0
context "math()"
snippet '(?!p|i|h)([A-Za-z])(\d{1,3}|n|k|j)' "x_{\d}" ir
`!p snip.rv = match.group(1) + "_{" +  match.group(2) + "}"`$0
endsnippet

context "math()"
snippet 'x(n|k|i|j|\d)(\+|-)(n|k|i|j|\d)' "x_{n+\d}" r
x_{`!p snip.rv = match.group(1) + match.group(2) + match.group(3)`}$0
endsnippet

#---------- 三角函数 ----------
priority 2001
context "math()"
snippet '(a|ar|arc)?(sin|cos|tan|csc|sec|cot)(2|3)?' "sin{}" ir
\\`!p 
one = match.group(1)
two = match.group(2)
thr = match.group(3)
if not one is None:
	s = "arc" + two
else:
	s = two
if not thr is None:
	s += "^{"+ thr +"}"
snip.rv = s
`{${1}}$0
endsnippet

priority 3001
context "math()"
snippet '(a|ar|arc)?(sin|cos|tan|csc|sec|cot)(2|3)?x' "sin{x}" ir
\\`!p 
one = match.group(1)
two = match.group(2)
thr = match.group(3)
if not one is None:
	s = "arc" + two
else:
	s = two
if not thr is None:
	s += "^{"+ thr +"}"
snip.rv = s
`{x}$0
endsnippet

#---------- 原函数 ----------
context "math()"
snippet 'fgx' "f(g(x))" ir
f(g(x))$0
endsnippet

context "math()"
snippet 'f'gx' "f(g(x))" ir
f'(g(x))$0
endsnippet


priority 2001
context "math()"
snippet '([Ffguv])('{0,3})((?!r|f|F|p)([a-zX]|\d+))' "f(x)" ir
`!p snip.rv = match.group(1) + match.group(2) + "(" + match.group(3) + ")"`$0
endsnippet

context "math()"
snippet yx "y(x)" w
y(x)$0
endsnippet

context "math()"
snippet '(F|f|g|G)('|''|''')?x(\d|i|n)' "f(x_0)" ir
`!p 
tag = match.group(1)
one = match.group(2)
two = match.group(3)
if not one is None:
	tag += one
if two == "i":
	snip.rv = tag + "(\\xi)"
else:
	snip.rv = tag + "(x_{" + two + "})"
`$0
endsnippet

context "math()"
snippet 'f(x|k|i|j)(\+|-)(\d{1,3})' "f(x+\d)" r
f(`!p snip.rv = match.group(1) + match.group(2) + match.group(3)`)$0
endsnippet

priority 1001
context "math()"
snippet 'phi((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)' "\phi(x)" ir
\\phi(`!p snip.rv = match.group(1)`)$0
endsnippet

priority 2001
context "math()"
snippet 'varphi((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)' "\varphi(x)" ir
\\varphi(`!p snip.rv = match.group(1)`)$0
endsnippet

priority 2001
context "math()"
snippet 'vphi((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)' "\vphi(x)" ir
\\varphi(`!p snip.rv = match.group(1)`)$0
endsnippet

priority 1001
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 2001
context "internel_math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\dfrac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
#================== Function ==================
context "math()"
pre_expand "create_matrix(snip)"
snippet '^mat(\d+\*\d+)' "matrix" r
endsnippet

context "math()"
pre_expand "create_matrix(snip,\"v\")"
snippet '^vmat(\d+\*\d+)' "matrix" r
endsnippet

context "math()"
pre_expand "create_matrix_middle(snip)"
snippet '.*\smat(\d)\*(\d)' "matrix_middle" r
endsnippet

context "math()"
pre_expand "create_matrix_middle(snip,\"v\")"
snippet '.*\svmat(\d)\*(\d)' "matrix_middle" r
endsnippet

global !p
def create_table(snip):
	rows = snip.buffer[snip.line].split('*')[0]
	cols = snip.buffer[snip.line].split('*')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def create_matrix_middle(snip, types=0):
    flag = "mat"
    if (types == 0):
        types = "b"
    if (types == "v"):
        flag = "vmat"
    rows = int(match.group(1))
    columns = int(match.group(2))
    old_str = snip.buffer[snip.line]
    snip.buffer[snip.line] = ''
    old_str = old_str.replace(flag+str(rows)+"*"+str(columns), "")
# make matrix
    body = ""
    anon_befor = "\\begin{"+types+"matrix} "
    for row in range(1, rows+1):
        body += ' & '.join(['$' + str(row*columns+col)
                           for col in range(1, columns+1)]) + "\\\\\\\\"
    anon_end = " \end{"+types+"matrix}"
    snip.expand_anon(old_str + anon_befor + body + anon_end)


def create_matrix(snip, types=0):
    strLen = 3
    if (types == "b"):
        strLen = 4
    elif (types == "v"):
        strLen = 4
    else:
        types = "b"
    lists = snip.buffer[snip.line].strip()[strLen:].split("*", 1)
    snip.buffer[snip.line] = ''
    rows = int(lists[0])
    columns = int(lists[1])
    anon_befor = "\\begin{"+types+"matrix}\n"
    body = ""
    for row in range(1, rows+1):
        body += ' & '.join(['$' + str(row*columns+col)
                           for col in range(1, columns+1)]) + "\\\\\\\n"
    anon_end = "\end{"+types+"matrix}"
    snip.expand_anon(anon_befor + body + anon_end)
endglobal

snippet main "main"
%!TeX program = xelatex
`!p 
# 创建一个包含所有路径的列表
paths_to_check = [
    os.getcwd(),  # 当前工作目录
    os.path.dirname(os.getcwd()),  # 上一层目录
    os.path.join(os.path.expanduser("~"), ""),  # 桌面目录
    os.path.join(os.path.expanduser("~"), "Desktop"),  # 桌面目录
    os.path.join(os.path.expanduser("~"), "Documents"),  # 文档目录
    os.path.join(os.path.expanduser("~"), "Downloads"),  # 下载文件夹目录
    os.path.join(os.path.expanduser("~"), "Desktop/study/Math"),  # 常用目录
]

# 待检测的文件名
file_to_check = "ctexmath.cls"

# 遍历每个路径并检测文件是否存在
is_live = 0
for path in paths_to_check:
	file_path = os.path.join(path, file_to_check)
	if os.path.exists(file_path):
		print(f"检测到 '{file_to_check}' 存在于路径: {path}")
		is_live = 1
		break
if is_live == 1:
	snip.rv = "\documentclass{" + path + "/ctexmath}"
else:
	snip.rv = """\documentclass{ctexmath}"""
`
%--------------------------------- Head -------------------------------------
\title{`!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`}
\author{\textcopyright Yang-datong }
\date{`!v strftime("%Y-%m-%d %H:%M")`}

\begin{document}
\makehead
%--------------------------------- Body -------------------------------------
$0

%--------------------------------- Reference --------------------------------
\newpage
\begin{thebibliography}{1}
	\bibitem{a} 作者. \emph{文献}[M]. 地点:出版社,年份.\url{www.google.com}
\end{thebibliography}

\end{document}
endsnippet
