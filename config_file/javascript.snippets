priority -50

snippet java_perform "perform"
Java.perform(() => {
	$0
});
endsnippet

snippet use "use"
Java.use(${1:"com.xx"})
endsnippet

snippet hook "hook"
//let cls = Java.use("${2:com.}")
cls.$1.overload('int').implementation = function(v0){
	send("$1")
	$0
	return this.$1(v0)
}
endsnippet

snippet java_choose "java_choose"
Java.choose('${1:com.xx.MainActivity}',{  //找到该类的对象
		onMatch: function(instance){
					send('onMeatch')
					//instance.main()  调用main()
			 },
		 onComplete:function(){

			 }
});
endsnippet

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing, comment, comment_inline
)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements" i
document.getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet

snippet query "Query selector" i
document.querySelector${1:All}('${2:el}')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`

endsnippet

snippet fun "function (fun)" w
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to var"
${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`
endsnippet

snippet anf "Anonymous Function" i
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	${VISUAL}$0
}(${2:$1}))`!p snip.rv = semi(snip)`
endsnippet

snippet ;fe "Minify safe iife"
;(function`!p snip.rv = space_before_function_paren(snip)`(${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet interval "setTimeout function"
setInterval(function() {
	${VISUAL}$0
}, ${1:1000})
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}, ${1:1000})
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}
endsnippet

snippet switch
switch`!p snip.rv = keyword_spacing(snip)`(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break`!p snip.rv = semi(snip)`
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'${VISUAL}${1:case}':
	${VISUAL}$0
	break`!p snip.rv = semi(snip)`
endsnippet

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0`!p snip.rv = semi(snip)`
endsnippet

snippet us
'use strict'`!p snip.rv = semi(snip)`
endsnippet

snippet f
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}
endsnippet

snippet forin
for (${3:var} ${1:key} in ${2:obj}) {
	if (!$2.hasOwnProperty($1)) continue
	$0
}
endsnippet

snippet for
for (${3:var} ${2:i} = 0; ${2:i} < ${1:Things}.length; $2++) {
	$3 item = $1[$2]$0
}
endsnippet

snippet "\(\)" "IEEEF" r
(function($1) {
	$0
})(${1:window});
endsnippet

snippet al "alert(...)" i
alert(${1:1024})$0
endsnippet

snippet Js "JSON.stringify(...)" i
JSON.stringify($0)
endsnippet

snippet Jp "JSON.parse(...)" i
JSON.parse($0)
endsnippet

snippet "([^\s]\S+)\.log" "console.log(postfix)" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet cl "console.log(...)" i
console.log(${1:1024})$0
endsnippet

snippet ce "console.error(...)" i
console.error(${1:1024})$0
endsnippet

snippet bc "block comment with visual selected"
/*
${VISUAL}
*/
endsnippet

snippet c "Toggle comment every single line"
`!p
snip.rv = comment(snip, START='// ', END='')
`$0
endsnippet

snippet ci "Toggle comment inline." i
`!p
snip.rv = comment_inline(snip, START="/* ", END=" */")
`$0
endsnippet

# vim:ft=snippets:
