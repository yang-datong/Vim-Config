snippet #! "shebang" b
#!/bin/bash
endsnippet

######################### Shell ######################
snippet /* "/*"
:<<!
$0
!
endsnippet


snippet > ">"
-gt
endsnippet

snippet < "<"
-lg
endsnippet

snippet if "if"
if [ ${1} ];then
	${0}
fi
endsnippet

snippet elif "elif" i
elif [ ${1} ];then
	${0}
endsnippet

snippet func "func" i
${1:function_name}(){
	${0:${VISUAL}}
}
endsnippet

snippet echo "echo -e" i
echo -e "\033[31m${1}\033[0m"
endsnippet

snippet '(.*).toArray' ".toArray" r
`!p snip.rv = match.group(1)`=(`!p snip.rv = match.group(1)`)
endsnippet


snippet Array_demo "Array_demo"
list=() #定义一个数组

list+=1
list+=2
list+=3
echo $list

for i in ${list[@]};do
	echo $i
done
endsnippet

snippet while "while()"
i=0
while ((i < ${1:100}));do
	${2}
	((i++))
done
endsnippet

snippet while1 "while(true)"
while true;do
	${1}
done
endsnippet

snippet whileread "while read"
while read line;do
	echo $line
done < ${1}
endsnippet

snippet fori "for(i)" i
for((i=0;i<${1};i++));do
	${0}
done
endsnippet

snippet for "for .. in" i
for i in ${1};do
	${0}
done
endsnippet

snippet '([A-Za-z].*)\.name' "perfix" r
file_name=\$\{`!p snip.rv = match.group(1)`%.*\}$0
endsnippet

snippet '([A-Za-z].*)\.type' "perfix" r
file_type=\$\{`!p snip.rv = match.group(1)`##*.\}$0
endsnippet

snippet perfix "perfix"
\$\{${1}%.*\}
endsnippet

snippet suffix "suffix"
\$\{${1}##*.\}
endsnippet

snippet case
case ${1:word} in
	${2:pattern})
		${0};;
esac
endsnippet


snippet check_activity "check_activity"
check_activity(){
	activity="\$1"
	local ret=$(adb shell dumpsys activity top | grep ACTIVITY | tail -1 | awk '{print \$2}')
	if [ "$ret" == "$activity" ];then
		echo 0
	else
		echo -1
	fi
}

ret=\`check_activity "${1:com.xingin.xhs/.index.v2.IndexActivityV2}"\`
echo $ret
endsnippet

snippet main
ScriptVersion="1.0"

unset file
unset directory

main(){
	echo "main()"
	if [ $file ];then
		echo "File -> $file"
	fi
	if [ $directory ];then
		echo "Directory -> $directory"
	fi
	$0
}

usage (){
  echo "Usage :  $(basename "\$0") [options] [--] argument-1 argument-2

  Options:
  -h, --help                  Display this message
  -d, --debug                 Debug model run
  -p, --posix                 Posix model parse shell command
  -v, --version               Display script version
  -f, --file FILE             Target file 
  -D, --directory DIRECTORY   Target directory"

}

while getopts ":hdpvf:D:-:" opt; do
  case "${opt}" in
    h) usage && exit 0;;
    d) set -x ;;
    p) set -o posix ;;
    v) echo "\$0 -- Version $ScriptVersion"; exit ;;
    f) file=${OPTARG};;
    D) directory=${OPTARG};;
    -) case "${OPTARG}" in
         help) usage && exit 0;;
         debug)      set -x ;;
         posix)      set -o posix ;;
         version)    echo "\$0 -- Version $ScriptVersion"; exit ;;
         file)       file=${!OPTIND}; OPTIND=$((OPTIND+1));;
         directory)  directory=${!OPTIND}; OPTIND=$((OPTIND+1));;
         *)          echo "Invalid option: --${OPTARG}" >&2 && exit 1;;
       esac;;
    :) echo "Option -${OPTARG} requires an argument." >&2 && exit 1;;
    *) echo "Invalid option: -${OPTARG}" >&2 && exit 1;;
  esac
done
shift $((OPTIND-1))

main "$@"
endsnippet

snippet root
if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi
endsnippet

######################### Shell ######################
snippet date "date"
local date=$(date +"%Y%m%d%H%M%S")
endsnippet

snippet log "log()"
log(){
	if [ \$# -gt 1 ];then
		printf "\033[31mParameter can only be one!!!" >& 2;exit;fi
	tty_wid=\$(tput cols)
	line=\$(printf "\033[33m%00\${tty_wid}d\n" 0 | tr "0" "=")
	string_len=\$(echo \$1 | wc -c)
	((tty_wid -= string_len))
	((tty_wid /= 2))
	echo \$line
	printf "%00\${tty_wid}d" 0 | tr "0" " "
	printf "\033[91m\$1\n"
	echo -e "$line\033[0m"
}
endsnippet

snippet echo_befor "echo_befor" i
echo -e "\033[33m\$(sed -n \$(expr \$LINENO - 1)p \$0).......\033[0m"
endsnippet

######################### Four tools ######################
snippet awk "awk ..." i
awk -F "${1}" '{print \$${2}}'
endsnippet

snippet seda "sed a"
sed -i "" "/${1:flag}/a\ 
	${2:content}
" $file
endsnippet

snippet seds "sed s"
sed -i "" "${1:code_line}s/${2:old}/${3:new}/" ${4:file}
endsnippet

snippet sedd "sed d"
sed -i "" "/${1:flag}/d" ${2:file}
endsnippet

######################### Utility ######################
snippet check_proxy "check_proxy"
check_proxy(){
	local err=$(echo $https_proxy)
	if [ -z "$err" ];then
		echo 0
	else
		echo 1
	fi
}

if [ $(check_proxy) == 1 ];then
	echo ${1:"使用了代理"}
fi
endsnippet
	
snippet 'is(darwin|mac|osx|ubuntu|linux|windows|win|wind)' "check_os" rw
`!p 
name = match.group(1)
if name == "mac" or name == "osx" or name == "darwin":
	snip.rv = "if [ \"$(uname)\" == \"Darwin\" ]; then"
elif name == "linux" or name == "ubuntu":
	snip.rv = "if [ \"$(uname)\" == \"Linux\" ]; then"
else:
	snip.rv = "if [ \"$(uname)\" != \"Linux\" ] && [ \"$(uname)\" == \"Darwin\" ]; then"
`	
	$0
fi
endsnippet

snippet check_os "check_os"
cc="brew"
#Check OS System
check_os(){
	case "$(uname)" in
	"Darwin") cc="brew";;
	"Linux") cc="sudo apt -y";;
	*)echo "Windows has not been tested for the time being";exit 1
	esac
}
endsnippet

snippet check_cmd "check_cmd"
#Checkout is install
check_cmd(){
	local obj=\$1
	local cmd=\$2
	if [ ! -x "$(command -v $obj)" ];then
		echo "$obj installing ....."
		${1:brew} install $cmd
	fi
}
endsnippet

snippet check_py_pack "check_py_pack"
#Checkout pip package is install
check_py_pack(){
	local cmd=\$1
	pip3 show $cmd
	if [ $? == 1 ];then
		pip3 install $cmd
	fi
}
endsnippet

snippet check_pid "check_pid" b
pids=()

for((i=0;i<100;i++));do
	${ffmpeg} -rtsp_transport tcp -i "rtsp://127.0.0.1:8888/output/0" -c copy saved_stream_${i}.mp4 -y &
	pids+=($!)
	sleep 0.5
done

echo "Started PIDs : ${pids[*]}"
echo "${pids[*]}" > .pull_stream.pids

kill_all(){
	if [ ! -f .pull_stream.pids ];then
		echo "No found .pull_stream.pids file";exit
	fi

	for pid in $(cat .pull_stream.pids);do
		if ps -p $pid > /dev/null;then
			kill $pid
		fi
	done

	if [ -f .pull_stream.pids ];then
		rm .pull_stream.pids
	fi
	echo -e "\033[32mKilled all pids\033[0m"
}

endsnippet

snippet check_ip "check_ip" b
input=\$1 # 获取输入参数

# 用正则表达式匹配IP:Port格式
# ^ 开始符
# ([0-9]{1,3}\.){3}[0-9]{1,3} 匹配IP地址，例如127.0.0.1
# : 分号，端口的前缀
# [0-9]+ 匹配端口号
# $ 结束符
regex="^([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]+"

if [[ $input =~ $regex ]]; then
	$1
else
	echo -e "\033[31mThe input '$input' is NOT a valid IP:Port format. \033[0m"
fi
endsnippet

snippet adb "adb"
cmd(){
	adb shell "\$1" || {
		echo -e "\033[31madb [ \$1 ] execution faild\033[0m" ; exit
	}
}
cmd "${1:id}"
endsnippet

######################### FFmpeg ######################
snippet ffprobe "ffprobe"
ffprobe -loglevel quiet -select_streams v -show_streams $1
endsnippet

snippet ffplay-help "ffplay-help"
ffplay -i $1 -f rawvideo -video_size $2 #default I420
#Play yuv[I420]

ffplay -i $1 -pix_fmt yuv420p -s $2
#Play yuv[420p]

ffplay -i $1 -pix_fmt nv21 -s $2
#Play yuv[nv21]
endsnippet

#已写入tools/*.sh 脚本
snippet ffmpeg_cut_frames "ffmpeg_frames"
ffmpeg -i $1.mp4 -c copy -frames:v $2 $1_cut_$2_frames.mp4 < /dev/null
endsnippet

#已写入tools/*.sh 脚本
snippet ffmpeg_cut_times "ffmpeg_cut_times"
ffmpeg -ss ${2:00:10:00} -to ${3:00:17:33} -i $1.mp4 -c copy $1_cut_times.mp4
ffmpeg -ss ${2:00:10:00} -t ${3:60} -i $1.mp4 -c copy $1_cut_times.mp4
endsnippet

#已写入tools/*.sh 脚本
snippet ffmpeg_segment_time "ffmpeg_segment_time"
ffmpeg -i $1.mp4 -f segment -segment_time 0.01 YUV/frames%d.yuv
endsnippet

#已写入tools/*.sh 脚本
snippet ffmpeg_get_I_frames "ffmpeg_get_I_frames"
ffmpeg -i ${1:input.mp4} -an -vf select='eq(pict_type\,I)' -vsync 2 -f image2 image-%05d.jpeg
ffmpeg -i ${1:input.mp4} -an -vf select='eq(pict_type\,I)' -vsync 2 -f image2 -qscale:v 2 image-%05d.jpeg #高清
endsnippet

snippet ffmpeg_merge_img_to_video "ffmpeg_merge_img_to_video"
ffmpeg -f image2 -i ${1:image%d.jpg} video.mpg
endsnippet

snippet ffmpeg_hardward_h264 "ffmpeg_hardward_h264"
ffmpeg -i ${1}.mp4 -c:v h264_videotoolbox ${1}.h264
endsnippet

snippet ffmpeg_hardward_h265 "ffmpeg_hardward_h265"
ffmpeg -i ${1}.mp4 -pix_fmt yuv420p10le -c:v hevc_videotoolbox ${1}.h265
endsnippet

snippet ffmpeg_get_one_frame "ffmpeg_get_one_frame"
ffmpeg -i ${1} -vf "select=eq(n\,${2:99})" -vframes 1 ${1}.png
endsnippet

snippet ffmpeg_img_convert_grayimg "ffmpeg_img_convert_grayimg"
ffmpeg -i ${1} -vf format=gray ${1}-gray
endsnippet

snippet on "on"
on $1()
	$0
end $1
endsnippet


snippet tell "tell"
tell application "${1:Finder}"
	$0
end tell
endsnippet

snippet // "//" w
<<'COMMENT'
	${VISUAL}$0 
COMMENT
endsnippet
