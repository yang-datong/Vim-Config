# Time <24-03-08 10:40:48, Yangdatong> 
#+---------------------- 目录 -------------------------+
#|------------------- 1. Head Env ---------------------|
#|------------------- 2. Class Env --------------------|
#|------------------- 3. Function Env -----------------|
#|------------------- 4. Function(Kit) Env ------------|
#|------------------- 5. Global Env -------------------|
#|------------------- 6. Python function --------------|
#|------------------- 7. Data Struct ------------------|
#|------------------- 8. Template ---------------------|
#+---------------------- 目录 -------------------------+


#snippet test-reg "test"
#${1} --> ${1/(条件1)*(条件2)*/(?2:满足条件2时显示 :满足条件1时显示 )/}$2${1/(条件1)*(条件2)*/(?2:满足条件2时显示 :满足条件1时显示 )/}
#endsnippet

#语法解释：
# 如果都不满足,则默认为满足条件1 来显示，这个语法在 
# https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt 下的：
# 4.7 Transformations                               *UltiSnips-transformations*
# A transformation has the following syntax: >
#    ${<tab_stop_no/regular_expression/replacement/options}














#-------------------- 1. Head Env ---------------
pre_expand "write_inclde_file(snip)"
snippet 'head|include' "head" br
endsnippet

snippet incc "inc"
#include "$1`!p
if (snip.ft == "cpp"):
	snip.rv = ".hpp"
else:
	snip.rv = ".h"
`"
$2
endsnippet

snippet inc "Inc"
#include <${1:stdio}${1/([^std]|stdstd)*(std.)?.*/(?2:.h:)/}>
$0
endsnippet

snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet ifundef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet ifdef "#if #endif" b
#if defined ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet



#-------------------- 2. Class Env ---------------
snippet class "class"
class ${1:`!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`}{
	public:
		$0
};
endsnippet

snippet cclass "cclass"
class ${1:C`!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`}{
	public:
		$0
};
endsnippet

snippet classs "class"
class `!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`{
	public:
		`!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`();
		~`!p snip.rv = snip.basename[:1].upper() + snip.basename[1:]`();
		$0
};
endsnippet

snippet pri "pri"
private:
	$0
endsnippet

snippet pub "pub"
public:
	$0
endsnippet

#-------------------- 3. Function Env ---------------
context "function()"
snippet '(int|char|size_t|uint8_t)\[\]=' "varible[]" r
`!p snip.rv = match.group(1)` ${1:name}[] = {0};
$0
endsnippet

context "function()"
snippet '(int|char|size_t|uint8_t|string)(\*)?=' "autoVarible" r
`!p
if match.group(1) == "string":
	snip.rv = "std::string"
else:
	snip.rv = match.group(1)
` `!p
if(match.group(2)):
	snip.rv = match.group(2)
`${1:name} = `!p
if ( match.group(2) and snip.ft == "cpp"):
	snip.rv = "nullptr"
elif (match.group(2) and snip.ft == "c"):
	snip.rv = "NULL"
elif (match.group(1) == "string" and snip.ft == "cpp"):
	snip.rv = "nullptr"
else:
	snip.rv = "0"`;
endsnippet

context "function()"
snippet if "if"
if($1){
	$2
}
endsnippet

context "function()"
snippet 'else|el' "else" ir
else{
	$0
}
endsnippet

priority 1001
context "function()"
snippet 'elseif|elif' "else if .. (eli)" ir
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

context "function()"
snippet ifel "ifel"
if($1){
	$3
}else if($2){
	$0
}
endsnippet

context "function()"
snippet 'echo|hi' "echo hi" r
`!p
if (snip.ft == "cpp"):
	snip.rv = "std::cout << \"hi~\" << std::endl;"
else:
	snip.rv = "printf(\"%s\\n\",\"hi~\");"
`
endsnippet

context "function()"
snippet 'printf|print|prin|pr' "printf .. (printf)" r
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

context "function()"
snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet < "add <<" "re.match('^(std::|\s+std::)?cout << .*? << (std::)?endl;$', snip.buffer[snip.line])" e
 << $0
endsnippet

snippet << "add <<" "re.match('^(std::|\s+std::)?cout << .*? << (std::)?endl;$', snip.buffer[snip.line])" e
 << $0
endsnippet

context "function()"
snippet cin
std::cin >> ${1};
endsnippet

context "function()"
snippet cout
std::cout << ${1} << std::endl;
endsnippet

priority 1001
context "function()"
snippet 'cout_line|coutLine|line|Line' "output current line" rw
`!p
if (snip.ft == "cpp"):
	snip.rv = "std::cout << \"Into -> \" << __FUNCTION__ << \"():\" << __LINE__ << std::endl;"
else:
	snip.rv = "printf(\"Into -> %s():%d\",__FUNCTION__,__LINE__);"
`
endsnippet

priority 1000
context "function()"
snippet 'cout.(.*)' "cout << info: << info << endl" r
std::cout << `!p 
strs=match.group(1)
snip.rv = f"\"{strs}:\" << {strs} "
`<< std::endl;
endsnippet

context "function()"
snippet cerr
std::cerr << "An error occurred on " << __FUNCTION__ << "():" << __LINE__ << std::endl;
endsnippet

context "function()"
snippet malloc "malloc"
$2 $3 = ($2) malloc(${1:size});
$0
if($3){
	free($3);
	$3 = nullptr;
}
endsnippet

context "function()"
snippet free "free"
if($1){
	free($1);
	$1 = nullptr;
}
endsnippet

context "function()"
snippet ret "ret"
return ${1:nullptr};
endsnippet

priority 1000
context "function()"
snippet '^\s{0,4}([a-z|A-Z|_].*)\.if' ".if" r
	if(`!p snip.rv = match.group(1)`){
		$0
	}
endsnippet

context "function()"
snippet '^\s{0,4}([a-z|A-Z|_].*)\.while' ".while" r
	while(`!p snip.rv = match.group(1)`){
		$0
	}
endsnippet

context "function()"
snippet '^\s{0,4}([a-z|A-Z|_].*)\.null' ".null" r
	if(!`!p snip.rv = match.group(1)`){
		std::cerr << "Fail `!p snip.rv = match.group(1)` is nullptr" << std::endl;
		return ${1:-1};
	}
endsnippet

context "function()"
snippet '^\s{0,4}([a-z|A-Z|_].*)\.err' ".err" r
	if(`!p snip.rv = match.group(1)`){
		fprintf(stderr, "Error `!p snip.rv = match.group(1)`\n");
		return ${1:-1};
	}
endsnippet

snippet try
try {
	$2
}catch(${1:...}) {
	$0
}
endsnippet

context "function()"
snippet while "while"
while(${1:1}){
	$0
}
endsnippet

context "function()"
snippet while1 "while1"
while(true){
	$0
}
endsnippet

priority 1001
context "function()"
snippet 'do-while|dowhile' "do-while" r
do{
	$0
}while(${1:true});
endsnippet

context "function()"
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		break;
	default:
		${4}
}
endsnippet

context "function()"
snippet 'fore|for' "foreach" wr
for (const auto &${1:it} : ${2:container}) {
	${0}
}
endsnippet

context "function()"
snippet 'for(i|j|k)' "for int loop (fori)" r
for (int `!p snip.rv = match.group(1)` = 0; `!p snip.rv = match.group(1)` < ${1}; ++`!p snip.rv = match.group(1)`) {
	${VISUAL}$2
}
endsnippet

context "function()"
snippet new "new"
$1 *buffer = new $1[${2:size}];
endsnippet

context "function()"
snippet 'delete|dele' "delete" r
delete[] ${1:buffer};
$1 = nullptr;
endsnippet

# TODO YangJing 移到C <24-04-18 08:59:09> #
#context "function()"
#snippet fopen "fopen"
#FILE *f = fopen($1, "${2:rb}");
#if(!f){
#	std::cerr << "Open file failed" << std::endl;
#	return -1;
#}
#$0
#endsnippet

#context "function()"
#snippet fread "fread"
#int readLen = fread(${1:buf},1,${2:size},${3:stream});
#if(readLen > 0){
#	$0
#}
#endsnippet

context "function()"
snippet fclose "fclose"
if($1){
	fclose($1);
	$1 = nullptr;
}
endsnippet

#-------------------- 4. Function(Kit) Env ---------------
context "function()"
snippet time "call function time"
struct timespec start_time, end_time;
clock_gettime(CLOCK_REALTIME, &start_time);
${1:function();}$0
clock_gettime(CLOCK_REALTIME, &end_time);
std::cout << "Number of seconds -> "  <<  end_time.tv_sec - start_time.tv_sec << std::endl;
endsnippet

context "function()"
snippet while_read "while read"
std::ifstream f("filename.txt");
if (f.is_open()) {
	std::string line;
	while (std::getline(f, line)) {
		//_labels_name.push_back(line);
	}
	f.close();
}
endsnippet

context "function()"
snippet write_string "write string"
#include <fstream>
std::ofstream ofs("log.txt");
ofs << "${1:content}" << std::endl;
myfile.close();
endsnippet

context "function()"
snippet file_write "file_write"
const char* filename = "${1:file}";
FILE *f = fopen(filename, "${2:wb}");
if(!f){
	std::cerr << "Open file failed" << std::endl;
	return -1;
}
const char* text = "${3:Write this to the file}";
fprintf(f, "%s", text);
$0
if(f){
	fclose(f);
	f = nullptr;
}
endsnippet

context "function()"
snippet file_open "file_open"
const char* filename = "${1:file}";
FILE *f = fopen(filename, "${2:rb}");
if(!f){
	std::cerr << "Open file failed" << std::endl;
	return -1;
}
$0
if(f){
	fclose(f);
	f = nullptr;
}
endsnippet

#-------------------- 5. Global Env ---------------
# TODO YangJing 有问题，场景如下： <24-03-30 16:15:01> #
# for (int i = 0; i < original.size()<在这按tab就一直循环在()里面 ; ++i) {
#  }
#snippet '(\(\)|\[\]|\|\||"")' "parent" ir
#`!p	snip.rv = match.group(1)[:1]`$1`!p snip.rv = match.group(1)[1:]`$0
#endsnippet

snippet exit "test" w
std::cout << "Into -> " << __FUNCTION__ << "():" << __LINE__ << std::endl;
exit(0);
endsnippet

snippet '(test|Test)(\d)' "'(test|Test)(\d)'" r
static int yangjing = 0;
yangjing++;
if (yangjing > `!p snip.rv = match.group(2)`){
	std::cout << "Into -> " << __FUNCTION__ << "():" << __LINE__ << std::endl;
	std::cout << "yangjing = " << yangjing << std::endl;
}
endsnippet

snippet 'static_assert|st_assert|assert' "'static_assert|st_assert|assert'" r
// Such as -> static_assert(sizeof(void *) == 4,"64位系统不支持");
static_assert(${1:/* conditions */},${2:/* Ouput */});
endsnippet


#用于修饰弃用的标记
snippet 'deprecated|deprecat|depre|dep' "'deprecated|deprecat|depre|dep'" br
[[deprecated]]
endsnippet


snippet 'struct|st' "struct" br
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet '(typedef|type|ty)(struct|st)' "struct" br
typedef struct ${2:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
}${3:aliasName};
endsnippet

snippet 'function|func|fun' "function" br
${1:void} ${2:function_name}($3){
	${VISUAL}$4
	//std::cout << "Into -> ${2/^(?!.*::).*$/" << __FUNCTION__ << "/g}()" << std::endl;
`!p 
if t[1] != "void":
	if t[1] == "int":
		snip.rv = "	return 0;\n"
	elif t[1] == "char":
		snip.rv = "	return '\\0';\n"
	elif t[1] == "void":
		snip.rv = "return;\n"
	else:
		snip.rv = "	return nullptr;\n"
`}
endsnippet

snippet 'func_construction|func_con|func_c|fun_c' "construction" br
$1::$1($2){
	$0
}
endsnippet

snippet 'func_declaration|func_decla|func_d|fun_d' "function declaration" br
${1:void} ${2:function_name}($3);
endsnippet

snippet 'trace|backtrace|printStack|stack' "'trace|backtrace|printStack|stack'" r
#include <execinfo.h>
void printStackTrace() {
  void *callstack[128];
  int i, frames = backtrace(callstack, 128);
  char **strs = backtrace_symbols(callstack, frames);
  for (i = 0; i < frames; ++i) {
    printf("%s\n", strs[i]);
  }
  free(strs);
}
endsnippet


snippet 'get_file_size' " 'getFileSize'"
void getFileSize(std::ifstream &file, std::streamsize &size) {
  file.seekg(0, std::ios::end);
  size = file.tellg();
  file.seekg(0, std::ios::beg);
}
endsnippet

snippet fopen "fopen"
//#include <fstream>
int openFile(std::string fileName, bool isBinaryFile = false) {
  std::ifstream file;
  if (isBinaryFile)
    file.open(fileName, std::ios_base::binary);
  else
    file.open(fileName);
  if (!file.is_open()) {
    std::cerr << "Error opening file: ";
    if (file.fail()) {
      // 文件无法打开（可能是路径错误或文件不存在）
      std::cerr << " No such file or directory. ";
    }
    if (file.bad()) {
      // 在文件操作过程中遇到严重错误（例如硬件错误）
      std::cerr << "Physical I/O error. ";
    }
  }
  /* TODO  file.close(); */
  return 0;
}
endsnippet

snippet fread "fread"
//#include <cstring>
int readFileBinary(std::ifstream &file, uint8_t *&buffer, int &bufferSize) {
  if (!file.is_open())
    return -1;

  /* 适当调整，读取一个17M的文件要花近1分钟 */
  const int readBufSize = 1024;
  /* 适当调整，读取一个17M的文件要花近1秒 */
  // const int readBufSize = 1024 * 1024;
  bool isRead = false;

  uint8_t *fileBuffer = new uint8_t[readBufSize];
  while (!isRead) {
    file.read(reinterpret_cast<char *>(fileBuffer), readBufSize);
    if (file.gcount() != 0) {
      uint8_t *const tmp = new uint8_t[bufferSize + file.gcount()];
      memcpy(tmp, buffer, bufferSize);
      memcpy(tmp + bufferSize, fileBuffer, file.gcount());
      if (buffer) {
        delete[] buffer;
        buffer = nullptr;
      }
      buffer = tmp;
      bufferSize += file.gcount();
    } else
      isRead = true;
  }
  delete[] fileBuffer;
  fileBuffer = nullptr;

  /* TODO delete[] buffer; */
  /* TODO buffer = nullptr; */
  /* TODO bufferSize = 0; */
  /* TODO file.close(); */
  /* ifstream对象被销毁时，它的析构函数会自动关闭文件，如果需要及时释放可以写 */

  if (!file.eof() && file.fail())
    return -2;
  return 0;
}
endsnippet

snippet fwrite "fwrite"
int writeFileBinary(std::ofstream &file, uint8_t *&buffer, int &bufferSize) {
  if (!file.is_open() || buffer == nullptr || bufferSize <= 0)
    return -1;
  file.write(reinterpret_cast<const char *>(buffer), bufferSize);

  /* TODO delete[] buffer; */
  /* TODO buffer = nullptr; */
  /* TODO bufferSize = 0; */
  /* TODO file.close(); */
  /* ifstream对象被销毁时，它的析构函数会自动关闭文件，如果需要及时释放可以写 */
  return 0;
}
endsnippet

#-------------------- 6. Variable type inference ---------------
#uint8_t *nulBuffer = new uint8_t[_bufferLen];
priority 2001
snippet "new\s(uint8_t|char|int|int8_t)\[(.*)\]" "new var_type[]" br
`!p 
varible_type = match.group(1)
malloc_size = match.group(2)
snip.rv = f"{varible_type} *"
`${1:varible_name}`!p 
varible_type = match.group(1)
malloc_size = match.group(2)
snip.rv = f" = new {varible_type}[{malloc_size}];"
`$2
endsnippet

snippet clangd "clangd"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "${1:-Wunused-variable}"
${VISUAL}${0}
#pragma GCC diagnostic pop
endsnippet

#foo()
# TODO YangJing 有问题 <24-03-30 16:10:46> #
#  if(original.size() == distorted.size()<在这里按Tab就乱了>){
#  }
#priority 2001
#snippet "([A-Za-z]+\d?)\((.*)\)" "funciton type" br
#${1:int} ${2:varible_name} = `!p 
#func_name = match.group(1)
#func_para = match.group(2)
#snip.rv = ""f"{func_name}({func_para});"
#`$3
#endsnippet

#av_log(NULL, ${3|AV_LOG_INFO,AV_LOG_ERROR|}, "${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
snippet 'avlog|av_log|log|av_l|av_|av' "avlog" rw
av_log(NULL, AV_LOG_${3:INFO}, "${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

priority 1000
context "function()"
snippet 'avlog.(.*)' "avlog(info:,info)" r
av_log(NULL, AV_LOG_INFO, `!p 
strs=match.group(1)
snip.rv = f"\"{strs}:%d\\n\", {strs}"
`);
endsnippet


#-------------------- 6. Python function ---------------
global !p
def write_inclde_file(snip):
		perfix = vim.eval("expand('%:r')")
		suffix = vim.eval("expand('%:e')")
		if (suffix == "cpp"):
			suffix = ".hpp"
		else:
			suffix = ".h"
		file = perfix + suffix
		snip.buffer[snip.line] = ""
		#if((not os.path.exists(file)) and (not os.path.exists("include/" + file))):
		#	snip.expand_anon("#include <" + file + ">") #本地和include目录都不存在该文件
		#else:
		#	snip.expand_anon("#include \"" + file + "\"")
		snip.expand_anon("#include \"" + file + "\"\n")

def function():
# TODO 有点Bug，不一定有用 <24-03-08 11:14:02, YangJing> #
	#tag_name = vim.eval("tagbar#currenttag('%s', '', 'f', 'scoped-stl')") #这里必须执行，先获取标签，再获取类型
	#tag_type = vim.eval("tagbar#currenttagtype('%s ', '')")
	##snip.expand_anon(tag_type)
	#return tag_type == 'function '
	return True
endglobal


#-------------------- 7. Data Struct ------------
#创建一个单链表
snippet create_linklist "create_linklist"
typedef struct LNnode {
  char data;  //数据域
  //char *data;  //数据域
  struct LNnode *next; //指针域
} LNode, *LinkList;
endsnippet

snippet linklist_insert_head "linklist_insert_head"
void listHeadInsert(LinkList &linkList) {
  LNode *node, *endPoint = linkList; // 表尾指针初始化指向头指针
  // for (int i = 0x41; i < 0x43; ++i) { // A,B,C
  for (int i = 0x41; i < 0x60; ++i) { // A,B,C,D,E.....,Z
    node = (LNnode *)malloc(sizeof(LNode));
    // 3. point to be inserted ,创建一个新结点
    node->data = i;
    // 4. data to be inserted,为其赋值
    node->next = linkList->next;
    // 5. forward to link list ,将新结点的 next 指针指向原链表的头结点
    linkList->next = node;
    // 6. update single link list next point,让头结点链向新结点
  }
  // When it is free? TODO  <24-03-24 20:01:22, YangJing>
}
endsnippet

snippet linklist_insert_tail "linklist_insert_tail"
void listTailInsert(LinkList &linkList) {
  LNode *node, *endPoint = linkList; // 表尾指针初始化指向头指针
  // for (int i = 0x41; i < 0x43; ++i) { // A,B,C
  for (int i = 0x41; i < 0x60; ++i) { // A,B,C,D,E.....,Z
    node = (LNnode *)malloc(sizeof(LNode));
    // 3. point to be inserted ,创建一个新结点
    node->data = i;
    // 4. End link list to be inserted,由于新结点插入到表尾故设为NULL指针
    node->next = nullptr;
    // 5. forward to link list ,表尾结点的 next 指针指向新指针
    endPoint->next = node;
    // 6. Update new node to endPoint 更新尾指针为新结点
    endPoint = node;
  }
  // When it is free? TODO  <24-03-24 20:01:22, YangJing>
}
endsnippet

snippet linklist_get_elem_by_index "linklist_get_elem_by_index"
LNode *getElemByIndex(const LinkList &linkList, const int index) {
  if (index < 1)
    return nullptr;
  LNnode *tmpNode = linkList->next;
  int i = 1;
  /* 通过判断当前node是否还有子node，即是否到达链表尾部，以及是否在目标查找范围内*/
  while (tmpNode->next != nullptr && i < index) {
    tmpNode = tmpNode->next;
    i++;
  }
  return tmpNode;
}
endsnippet

snippet linklist_get_elem_by_elem "linklist_get_elem_by_elem"
LNnode *getElemByElem(const LinkList &linkList, const LNode &node) {
  if (!node.next)
    return nullptr;
  LNnode *tmpNode = linkList->next;
  /* 通过判断当前node是否还有子node，即是否到达链表尾部，以及是否匹配到对应的块*/
  while (tmpNode->next != nullptr && tmpNode->data != node.data)
    tmpNode = tmpNode->next;
  /* TODO YangJing 元素相同的情况只会匹配到首次出现的那一个 <24-03-24 23:17:59>
   */
  return tmpNode;
}
endsnippet

snippet linklist_insert_elem_by_index "linklist_insert_elem_by_index"
int insertElemByIndex(const LinkList &linkList, LNnode *const node, int index) {
  LNnode *lastOneElem = getElemByIndex(linkList, index - 1);
  /* 先获取"待插入位置的上一结点元素" */
  if (!lastOneElem->next) {
    std::cout << "插入范围错误，单链表并没有这么长" << std::endl;
    return -1;
  }
  // LNode *oldElem = lastOneElem->next;
  /* 保存"原本待插入位置的原结点元素" */
  node->next = lastOneElem->next;
  /* （链接尾部链条）将"新插入的结点元素"的next指针指向"原本待插入位置的原结点元素" */
  lastOneElem->next = node;
  /* （链接头部链条）将待插入位置的上一节元素的next指针指向新插入的结点元素 */
  return 0;
}
endsnippet


#创建一个双链表
# TODO YangJing  <24-04-14 14:56:40> #

#创建一个二叉树
snippet create_binary_tree "create_binary_tree"
struct TreeNode {
  int value;       // 节点存储的值
  TreeNode *left;  // 指向左子节点的指针
  TreeNode *right; // 指向右子节点的指针

  // 构造函数
  TreeNode(int x) : value(x), left(nullptr), right(nullptr) {}
};
endsnippet

snippet binaryTree_build "binaryTree_build"
/* 递归地构建二叉树 */
TreeNode *buildTree(const vector<int> &nodes, int index) {
  if (index >= (int)nodes.size() || nodes[index] == -1) /* 控制递归结束 */
    return nullptr;
  TreeNode *node = new TreeNode(nodes[index]);
  /* 先构建整个左子树（相对根节点而言） */
  node->left = buildTree(nodes, 2 * index + 1);
  /* 再构建整个右子树（相对根节点而言） */
  node->right = buildTree(nodes, 2 * index + 2);
  return node;
}

//  vector<int> nodes = {1, 2, 3, 4, -1, -1, 7, -1, 9};
//  TreeNode *root = buildTree(nodes, 0);
endsnippet

snippet binaryTree_free "binaryTree_free"
/* 由内向外进行释放内存 */
void deleteTree(TreeNode *node) {
  if (node == nullptr)
    return;
  deleteTree(node->left);
  deleteTree(node->right);
  cout << node->value << " ";
  delete node;
}
endsnippet

snippet binaryTree_preorder_traversal "binaryTree_preorder_traversal"
void preorderTraversal(TreeNode *node) {
  if (node == nullptr)
    return;
  cout << node->value << " ";
  preorderTraversal(node->left);
  preorderTraversal(node->right);
}
endsnippet

snippet binaryTree_inorder_traversal "binaryTree_inorder_traversal"
void inorderTraversal(TreeNode *node) {
  if (node == nullptr)
    return;
  inorderTraversal(node->left);
  cout << node->value << " ";
  inorderTraversal(node->right);
}
endsnippet

snippet binaryTree_postorder_traversal "binaryTree_postorder_traversal"
void postorderTraversal(TreeNode *node) {
  if (node == nullptr)
    return;
  postorderTraversal(node->left);
  postorderTraversal(node->right);
  cout << node->value << " ";
}
endsnippet

#-------------------- 8. Template ---------------
snippet main "main() (main)" b
int main() {
	${VISUAL}$0
	return 0;
}
endsnippet

snippet 'temp|mainn' "mainn() " br
#include <getopt.h>
#include <iostream>

#define VERSION 1.0

using namespace std;

static string file;

inline void use(char *me) {
  cout << "Usage: " << me << " [options] [--] argument-1 argument-2 \
                    \n\n  Options:\
                      \n  -h, --help           Display this message\
                      \n  -v, --version        Display version\
                      \n  -f, --file           Use File\
                      \n";
}

void CheckArgument(int argc, char *argv[]) {
  const char *short_opts = "hvf:";
  const option long_opts[] = {{"help", no_argument, nullptr, 'h'},
                              {"version", no_argument, nullptr, 'v'},
                              {"file", required_argument, nullptr, 'f'},
                              {nullptr, no_argument, nullptr, 0}};

  int opt;
  while ((opt = getopt_long(argc, argv, short_opts, long_opts, nullptr)) !=
         -1) {
    switch (opt) {
    case 'h':
      use(argv[0]);
      exit(0);
    case 'v':
      cout << "Version: " << VERSION << endl;
      exit(0);
    case 'f':
      file = optarg;
      break;
    default:
      cout << "Unknown option: " << opt << endl;
      exit(1);
    }
  }
}

int main (int argc, char *argv[]) {
  CheckArgument(argc, argv);
  if (file.empty()) {
    use(argv[0]);
    return -1;
  }
	$0

  return 0;
}
endsnippet
