#!/bin/bash
ScriptVersion="3.0"

unset src
unset cc
unset file_suffix
unset level
unset flag
unset include_path
unset lib_path
unset libs
unset flag

is_cmake=1
#cmake="cmake"
#make="make -j $(nproc)"
cmake="cmake -B build"
make="cmake --build build -j $(nproc)"
cmake_version=3.10
cmake_cxx_standard=14


#---------------------------------------- CMakeLists Generate ----------------------------------------
cmake_main(){
  whether_has_source_file
  if [ "$1" == "clean" ];then
    clean_cmake "all" && exit
  elif [ "$1" == "make" ];then
    ${make} && clean_cmake && exit
  fi

  local f="CMakeLists.txt"
  if [ -f $f ];then
    #cat $f
    read -p "继续执行将覆盖${f}是否继续？[y/N]" OK
    if [ "$OK" != "y" ];then
      ${cmake} . && ${make}
    else
      generate_cmakelists
    fi
  else
      generate_cmakelists
  fi
  #现在默认不清理生成文件，提高二次编译速度
  #clean_cmake
}

generate_cmakelists(){
cat << EOF > CMakeLists.txt
# Minimum version used by CMake
cmake_minimum_required(VERSION ${cmake_version})

# Project name
project(project_name)

# C++ version used, added compilation parameters
set(CMAKE_CXX_STANDARD ${cmake_cxx_standard})
$(if [ $flag ]; then 
  echo "set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -Wall $(echo $flag | sed 's/[\,\-\.\_]/ /g')\")"
else
  echo "set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -Wall -g3 -O0\")"
fi)

$(if [ $include_path ]; then 
  echo " "
  echo "# Specify header file directory"
  echo "include_directories($include_path)"
  echo " "
fi)

$(if [ $src ];then
  echo "# Specify source files"
  echo "add_executable( ${src%.*} $src )"
else
  echo "# Find all source files in the current directory"
  echo "aux_source_directory(. SOURCES)"
  echo " "
  echo "# Compile all source code together and link it to an executable file 'a.out'"
  echo "add_executable(a.out \${SOURCES})"
fi)

$(if [ $libs ];then
    echo " "
  if [ $src ];then
    echo "target_link_libraries(${src%.*} $(echo $libs | sed 's/[\,\-\.\_]/ /g') )"
  else
    echo "target_link_libraries(a.out $(echo $libs | sed 's/[\,\-\.\_]/ /g') )"
  fi
fi)
EOF


  #if [ $lib_path ];then
  #  echo "file(GLOB LIBS \"$lib_path/*.so\" \"$lib_path/*.dylib\")" >> $f
  #fi

  #if [ $dir ];then
  #  echo "set(OpenCV_DIR $dir)" >> $f
  #  echo "find_package(OpenCV REQUIRED )" >> $f
  #  echo "include_directories(\${OpenCV_INCLUDE_DIRS})" >> $f
  #fi

  #if [ $dir ];then
  #  if [ $src ];then
  #    echo "target_link_libraries(${src%.*} \${OpenCV_LIBS} )" >> $f
  #  else
  #    echo "target_link_libraries(\${BIN} \${OpenCV_LIBS})" >> $f
  #  fi
  #fi

  #if [ $lib_path ];then
  #  if [ $src ];then
  #    echo "target_link_libraries(${src%.*} \${LIBS} )" >> $f
  #  else
  #    echo "target_link_libraries(\${BIN} \${LIBS})" >> $f
  #  fi
  #fi
  ${cmake} . && ${make}
}

clean_cmake(){
  local date=$(date +"%Y%m%d%H%M%S")
  if [[ -f "Makefile" && "$1" == "all" ]];then
    ${make} clean
    mv Makefile /tmp/Makefile_$date
  fi
  if [ -f CMakeCache.txt ];then
    mv CMakeCache.txt /tmp/CMakeCache.txt_$date
  fi
  if [ -f cmake_install.cmake ];then
    mv cmake_install.cmake /tmp/cmake_install.cmake_$date
  fi
  if [ -f CTestTestfile.cmake ];then
    mv CTestTestfile.cmake /tmp/CTestTestfile.cmake_$date
  fi
  if [ -d CMakeFiles ];then
    mv CMakeFiles /tmp/CMakeFiles_$date
  fi
}




#---------------------------------------- Makefile Generate ----------------------------------------
makefile_main(){
  if [ "$1" == "clean" ];then
    ${make} clean
  fi
  if [ "${src##*.}" == "c" ];then
    cc="c"
  elif [ "${src##*.}" == "cpp" ];then
    cc="cpp"
  fi
  if [ "$cc" == "c" ];then
    c_kind
  elif [ "$cc" == "cpp" ];then
    cpp_kind
  else
    check_build_type
  fi
  check_is_lib_path

  local f="Makefile"
  if [ -f $f ];then
    #cat $f
    read -p "继续执行将覆盖${f}是否继续？[y/N]" OK
    if [ "$OK" != "y" ];then
      ${make}
    else
      generate_makefile
    fi
  fi
}

generate_makefile(){
  local f="Makefile"
  echo "CC:=$cc" > ${f}
  if [ $src ];then
    echo "BIN:=${src%.*}" >> ${f}
  else
    echo "BIN:=a.out" >> ${f}
  fi
  if [ $include_path ];then
    include_path="-I $include_path"
  fi
  echo "${flag}:=-g -O0 -ggdb -Wall ${level} ${include_path}" >> ${f}
  if [ -n "$lib_path" ];then
    echo "LIBS=${lib_path}" >> ${f}
    lib_path="\$(LIBS)"
  fi
  if [ $src ];then
    src="SRC:=$src"
  else
    src="SRC:=\$(wildcard *.${file_suffix})"
  fi
  echo "$src" >> ${f}
  echo "OBJS:=\$(patsubst %.${file_suffix},%.o,\$(SRC))" >> ${f}
  echo "" >> ${f}
  echo "\$(BIN):\$(OBJS)" >> ${f}
  echo "	\$(CC) \$^ -o \$@ ${lib_path}" >> ${f}
  echo "" >> ${f}
  echo "clean:" >> ${f}
  echo "	rm \$(OBJS) \$(BIN)" >> ${f}
  ${make}
}


#---------------------------------------- Utility Tool Functions ----------------------------------------
#Check OS System
check_os(){
  case "$(uname)" in
  "Darwin") echo ".dylib" ;;
  "Linux") echo ".so" ;;
  *)echo "Windows has not been tested for the time being";exit 1
  esac
}

check_is_lib_path(){
  if [ $lib_path ];then
    grep_modl=".$(check_os)$"
    libs=$(ls ${lib_path} | grep "${grep_modl}" | sed -e 's/lib/-l/' -e "s/\.${grep_modl}//" -e 's/\..*//' | uniq | tr '\n' ' ' )

    #Find static library -> ".a"
    if [ -z "$libs" ];then
      grep_modl=".a$"
      libs=$(ls ${lib_path} | grep "${grep_modl}" | sed -e 's/lib/-l/' -e "s/\.${grep_modl}//" -e 's/\..*//' | uniq | tr '\n' ' ' )
    fi

    lib_path="-L $lib_path $libs"
  fi
}

check_build_type(){
  local c_total=$(ls | grep "\.c$" | wc -l)
  local cpp_total=$(ls | grep "\.cpp$" | wc -l)

  if [  $c_total -gt 0 -a $cpp_total -gt 0 ];then
    echo -e "\033[31m Detection c file and c++ file ,use -c [filename] argument\033[0m"
    exit;
  fi

  if [ $c_total == 0 -a $cpp_total == 0 ];then
    echo "No target/complist(C\\Cpp) passed" ; exit;
  elif [ $c_total -gt 0 -a $cpp_total == 0 ];then
    c_kind
  elif [ $c_total == 0 -a $cpp_total -gt 0 ];then
    cpp_kind
  fi
}

c_kind(){
  cc="gcc" #gcc 在Mac下同样指向clang
  file_suffix="c"
  level="-std=c17"
  flag="CFLAGS"
}

cpp_kind(){
  cc="g++" #g++ 在Mac下同样指向clang++
  file_suffix="cpp"
  level="-std=c++14"
  flag="CPPFLAGS"
}

whether_has_source_file(){
  local c_total=$(ls | grep "\.c$" | wc -l)
  local cpp_total=$(ls | grep "\.cpp$" | wc -l)
  if [ $c_total == 0 -a $cpp_total == 0 ];then
    echo "no found c\\cpp file" ; exit;
  fi
}




#---------------------------------------- Command Handle ----------------------------------------

usage (){
  echo "Usage :  $(basename "$0") [options] [--] argument-1 argument-2

  Options:
  -h, --help       Display this message
  -d, --debug      Debug model run
  -p, --posix      Posix model parse shell command
  -v, --version    Display script version
  -f, --flag       Compiler parameters
  -c, --source     Used source file
  -I, --include    Used include file
  -l, --lib        Used library(as -> -l avformat,avfilter,avcodec)
  -L, --library    Used dynamic library(default all dylib)
  -t, --type       Build type
  -D, --dir        Cmake auto find directory
  --cmake           Use Cmake build project(default)
  --no-cmake        Use Makefile build project"
}

while getopts ":hdpvf:c:I:l:L:t:D:-:" opt; do
  case "${opt}" in
    h) usage && exit 0;;
    d) set -x ;;
    p) set -o posix ;;
    v) echo "$0 -- Version $ScriptVersion"; exit ;;
    f) flag="${OPTARG}";;
    c) src=${OPTARG} ;;
    I) include_path="${OPTARG}" ;;
    l) libs="${OPTARG}" ;;
    L) lib_path=${OPTARG} ;;
    t) cc=${OPTARG} ;;
    D) dir=${OPTARG} ;;
    -) case "${OPTARG}" in
      help) usage && exit 0;;
      debug)    set -x ;;
      posix)    set -o posix ;;
      version)  echo "$0 -- Version $ScriptVersion"; exit ;;
      flag)     flag=${OPTARG} ;;
      source)   src=${OPTARG} ;;
      include)  include_path="${OPTARG}" ;;
      lib)      libs="${OPTARG}" ;;
      library)  lib_path=${OPTARG} ;;
      type)     cc=${OPTARG} ;;
      dir)      dir=${OPTARG} ;;
      cmake)    is_cmake=1;;
      no-cmake) is_cmake=0;;
      *) echo "Invalid option: --${OPTARG}" >&2 && exit 1;;
    esac;;
  :) echo "Option -${OPTARG} requires an argument." >&2 && exit 1;;
  *) echo "Invalid option: -${OPTARG}" >&2 && exit 1;;
esac
done

shift $((OPTIND-1))


if [ $is_cmake == 1 ];then
  cmake_main "$@"
else
  makefile_main "$@"
fi
