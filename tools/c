#!/bin/bash
ScriptVersion="3.0"

set -e

unset src
unset cc
unset file_suffix
unset level
unset include_path
unset lib_path
unset libs
unset flag
unset pkg_config

is_cmake=1
#cmake="cmake"
cmake="cmake -B build"
make="cmake --build build -j $(nproc)"
make2="make -j $(nproc)"
cmake_version=3.10
cmake_cxx_standard=14

#---------------------------------------- CMakeLists Generate ----------------------------------------
cmake_main() {
  whether_has_source_file
  if [ "$1" == "clean" ]; then
    clean_cmake "all" && exit
  elif [ "$1" == "make" ]; then
    ${make} && clean_cmake && exit
  fi

  check_is_lib_path

  local f="CMakeLists.txt"
  if [ -f $f ]; then
    read -p "是否重新生成${f}？[y/N]" OK
    if [ "$OK" != "y" ]; then
      ${cmake} . && ${make}
    else
      generate_cmakelists
    fi
  else
    generate_cmakelists
  fi
  #现在默认不清理生成文件，提高二次编译速度
  #clean_cmake
  #生成compile_commands.json文件到项目根目录
  generate_compile_commands_file
}

generate_cmakelists() {
  cat <<EOF >CMakeLists.txt
# Minimum version used by CMake
cmake_minimum_required(VERSION ${cmake_version})
# Generate compile_commands.json file
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Project name
project(project_name)

# C++ version used, added compilation parameters
set(CMAKE_CXX_STANDARD ${cmake_cxx_standard})
$(if [ "$flag" ]; then
    echo "set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -Wall $(echo $flag | sed 's/[\,\-\.\_]/ /g')\")"
  else
    echo "set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -Wall -g3 -O0\")"
  fi)

$(if [ "${pkg_config}" ]; then
    echo "# Config pkg-config"
    echo "find_package(PkgConfig REQUIRED)"
    echo ""
    echo "# Specify PkgConfig"
    echo "pkg_check_modules(PKG REQUIRED ${pkg_config})"
    echo ""
    echo "# Specify header file directory"
    echo "include_directories(\${PKG_INCLUDE_DIRS})"
  fi)

$(if [ "$include_path" ]; then
    echo "# Specify header file directory"
    echo "include_directories($include_path)"
  fi)

$(if [ "$lib_path" ]; then
    echo "# Specify library file directory"
    echo "link_directories(${lib_path})"
  fi)

$(if [ $src ]; then
    echo "# Specify source files"
    echo "add_executable( ${src%.*} $src )"
  else
    echo "# Find all source files in the current directory"
    echo "aux_source_directory(. SOURCES)"
    echo " "
    echo "# Compile all source code together and link it to an executable file 'a.out'"
    echo "add_executable(a.out \${SOURCES})"
  fi)

$(if [ "$lib_path" ]; then
    if [ "$src" ]; then
      echo "target_link_libraries(${src%.*} ${libs})"
    else
      echo "target_link_libraries(a.out ${libs})"
    fi
  fi)

$(if [ "${pkg_config}" ]; then
    if [ "$src" ]; then
      echo "target_link_libraries(${src%.*} \${PKG_LIBRARIES})"
      echo ""
      echo "# Compile flags"
      echo "target_compile_options(${src%.*} PRIVATE \${PKG_CFLAGS})"
    else
      echo "target_link_libraries(a.out \${PKG_LIBRARIES})"
      echo ""
      echo "# Compile flags"
      echo "target_compile_options(a.out PRIVATE \${PKG_CFLAGS})"
    fi

  fi)
EOF

  ${cmake} . && ${make}
}

clean_cmake() {
  local date=$(date +"%Y%m%d%H%M%S")
  if [[ -f "Makefile" && "$1" == "all" ]]; then
    ${make} clean
    mv Makefile /tmp/Makefile_$date
  fi
  if [ -f CMakeCache.txt ]; then
    mv CMakeCache.txt /tmp/CMakeCache.txt_$date
  fi
  if [ -f cmake_install.cmake ]; then
    mv cmake_install.cmake /tmp/cmake_install.cmake_$date
  fi
  if [ -f CTestTestfile.cmake ]; then
    mv CTestTestfile.cmake /tmp/CTestTestfile.cmake_$date
  fi
  if [ -d CMakeFiles ]; then
    mv CMakeFiles /tmp/CMakeFiles_$date
  fi
  if [ -d build ]; then
    mv build /tmp/build_$date
  fi
}

#---------------------------------------- Makefile Generate ----------------------------------------
makefile_main() {
  if [ "$1" == "clean" ]; then
    ${make} clean
  fi
  if [ "${src##*.}" == "c" ]; then
    cc="c"
  elif [ "${src##*.}" == "cpp" ]; then
    cc="cpp"
  fi
  if [ "$cc" == "c" ]; then
    c_kind
  elif [ "$cc" == "cpp" ]; then
    cpp_kind
  else
    check_build_type
  fi
  check_is_lib_path

  local f="Makefile"
  if [ -f $f ]; then
    read -p "是否重新生成${f}？[y/N]" OK
    if [ "$OK" != "y" ]; then
      ${make2}
    else
      generate_makefile
    fi
  else
    generate_makefile
  fi
  generate_compile_commands_file
}

generate_makefile() {
  local f="Makefile"
  echo "CC:=$cc" >${f}
  if [ $src ]; then
    echo "BIN:=${src%.*}" >>${f}
  else
    echo "BIN:=a.out" >>${f}
  fi
  if [ "$include_path" ]; then
    include_path="-I $include_path"
  fi
  echo "${flag}:=-g -O0 -ggdb -Wall ${level} ${include_path}" >>${f}
  if [ "$lib_path" ]; then
    echo "LIBS=${lib_path}" >>${f}
    lib_path="\$(LIBS)"
  fi
  if [ "$src" ]; then
    src="SRC:=$src"
  else
    src="SRC:=\$(wildcard *.${file_suffix})"
  fi
  echo "$src" >>${f}
  echo "OBJS:=\$(patsubst %.${file_suffix},%.o,\$(SRC))" >>${f}
  echo "" >>${f}
  echo "\$(BIN):\$(OBJS)" >>${f}
  echo "  \$(CC) \$^ -o \$@ ${lib_path}" >>${f}
  echo "" >>${f}
  echo "clean:" >>${f}
  echo "  rm \$(OBJS) \$(BIN)" >>${f}
  ${make}
}

#---------------------------------------- Utility Tool Functions ----------------------------------------
#Check OS System
check_os() {
  case "$(uname)" in
  "Darwin") echo ".dylib" ;;
  "Linux") echo ".so" ;;
  *)
    echo "Windows has not been tested for the time being"
    exit 1
    ;;
  esac
}

check_is_lib_path() {
  if [ -n "$lib_path" ]; then
    grep_modl=".$(check_os)$"
    libs+=" $(ls ${lib_path} | grep "${grep_modl}" | sed -e 's/lib//' -e "s/\.${grep_modl}//" -e 's/\..*//' | uniq | tr '\n' ' ')"

    #Find static library -> ".a"
    if [ -z "$libs" ]; then
      grep_modl=".a$"
      libs+=" $(ls ${lib_path} | grep "${grep_modl}" | sed -e 's/lib//' -e "s/\.${grep_modl}//" -e 's/\..*//' | uniq | tr '\n' ' ')"
    fi

    #lib_path="-L $lib_path $libs"
  fi
}

check_build_type() {
  local c_total=$(ls | grep "\.c$" | wc -l)
  local cpp_total=$(ls | grep "\.cpp$" | wc -l)

  if [ $c_total -gt 0 -a $cpp_total -gt 0 ]; then
    echo -e "\033[31m Detection c file and c++ file ,use -c [filename] argument\033[0m"
    exit
  fi

  if [ $c_total == 0 -a $cpp_total == 0 ]; then
    echo "No target/complist(C\\Cpp) passed"
    exit
  elif [ $c_total -gt 0 -a $cpp_total == 0 ]; then
    c_kind
  elif [ $c_total == 0 -a $cpp_total -gt 0 ]; then
    cpp_kind
  fi
}

c_kind() {
  cc="gcc" #gcc 在Mac下同样指向clang
  file_suffix="c"
  level="-std=c17"
  flag="CFLAGS"
}

cpp_kind() {
  cc="g++" #g++ 在Mac下同样指向clang++
  file_suffix="cpp"
  level="-std=c++14"
  flag="CPPFLAGS"
}

whether_has_source_file() {
  local c_total=$(ls | grep "\.c$" | wc -l)
  local cpp_total=$(ls | grep "\.cpp$" | wc -l)
  if [ $c_total == 0 -a $cpp_total == 0 ]; then
    echo "no found c\\cpp file"
    exit
  fi
}

generate_compile_commands_file() {
  if [ $is_cmake == 1 ]; then
    #For Cmake
    if [ -d build ]; then
      pushd build
      cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
      popd
      if [ -f build/compile_commands.json ]; then
        mv build/compile_commands.json ./
      fi
    else
      cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .
    fi
    #For Makefile
  else
    echo "For Makefile build : exec 'apt install bear' -> exec 'make clean && bear -- make'"
  fi
}

generate_gdb_file() {
  if [ -f gdb.sh ]; then
    read -p "是否重新生成${f}？[y/N]" OK
    if [ "$OK" != "y" ]; then return; fi
  fi

  cat <<EOF >gdb.sh
#!/bin/bash

#设置动态库执行路径，在动态库存在于用户目录时
#export LD_LIBRARY_PATH=libavcodec:libavdevice:libavfilter:libavformat:libavresample:libavutil:libpostproc:libswresample:libswscale

#程序
program="a.out"
#program="build/a.out"

#程序执行需要的参数
#args="-i input.mp4 output.h265"

#源代码路径(Glibc路径,Option)
#ldd_version=\$(ldd --version | grep ldd | awk '{print \$5}')

#source_dir="libavcodec:libavdevice:libavfilter:libavformat:libavresample:libavutil:libpostproc:libswresample:libswscale"
#source_dir="/usr/src/glibc/glibc-\${ldd_version}"

#最后传入脚步参数，配合这Vim-GDB使用
if [ "\$(uname)" == "Linux" ]; then
  gdb \${program} -ex "set args \${args}" -ex "directory \${source_dir}" -ex "b main" -ex "r" "\$@" -ex "c"
else
  lldb \${program} -o "run \${args}" -o "b main" -o "r" "\$@" -o "c"
fi
EOF

  echo -e "\033[32mOutput -> gdb.sh\033[0m"
  cat gdb.sh
}

#---------------------------------------- Command Handle ----------------------------------------

usage() {
  echo "Usage :  $(basename "$0") [options] [--] argument-1 argument-2

  Options:
  -h, --help            Display this message
  -d, --debug           Debug model run
  -p, --posix           Posix model parse shell command
  -v, --version         Display script version
  -f, --flag            Compiler parameters
  -c, --source          Used source file
  -I, --include         Used include file(as -> -I 'x264/include x265/include')
  -l, --lib             Used library(as -> -l 'avformat avfilter avcodec')
  -L, --library         Used dynamic library(default all dylib)
  -t, --type            Build type
  -D, --dir             Cmake auto find directory
  --cmake               Use Cmake build project(default)
  --no-cmake            Use Makefile build project
  --makefile            Use Makefile build project
  --pkg                 For Cmake in use pkg_config
  --gen_compile_file    Generate a compile_commands.json file for Clangd
  --gen_gdb_file        Generate a gdb.sh file for GDB


  As -> c -I ../ffmpeg-4.4.2/build/include -L '../ffmpeg-4.4.2/build/lib ../x264-master/build/lib ../x265_3.6/build/linux' -l m --pkg opencv
  "
}

while getopts ":hdpvf:c:I:l:L:t:D:-:" opt; do
  case "${opt}" in
  h) usage && exit 0 ;;
  d) set -x ;;
  p) set -o posix ;;
  v)
    echo "$0 -- Version $ScriptVersion"
    exit
    ;;
  f) flag="${OPTARG}" ;;
  c) src=${OPTARG} ;;
  I) include_path="${OPTARG}" ;;
  l) libs="${OPTARG}" ;;
  L) lib_path=${OPTARG} ;;
  t) cc=${OPTARG} ;;
  D) dir=${OPTARG} ;;
  -) case "${OPTARG}" in
    help) usage && exit 0 ;;
    debug) set -x ;;
    posix) set -o posix ;;
    version)
      echo "$0 -- Version $ScriptVersion"
      exit
      ;;
    flag)
      flag=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    source)
      src=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    include)
      include_path=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    lib)
      libs=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    library)
      lib_path=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    type)
      cc=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    dir)
      dir=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    cmake) is_cmake=1 ;;
    no-cmake) is_cmake=0 ;;
    makefile) is_cmake=0 ;;
    #对于pkg-config 必须使用Cmake
    pkg)
      is_cmake=1
      pkg_config=${!OPTIND}
      OPTIND=$((OPTIND + 1))
      ;;
    gen_compile_file)
      generate_compile_commands_file
      exit
      ;;
    gen_gdb_file)
      generate_gdb_file
      exit
      ;;
    *) echo "Invalid option: --${OPTARG}" >&2 && exit 1 ;;
    esac ;;
  :) echo "Option -${OPTARG} requires an argument." >&2 && exit 1 ;;
  *) echo "Invalid option: -${OPTARG}" >&2 && exit 1 ;;
  esac
done

shift $((OPTIND - 1))

if [ $is_cmake == 1 ]; then
  cmake_main "$@"
else
  makefile_main "$@"
fi
