#!/bin/bash

ScriptVersion="1.0"

path="/data/local/tmp"
#path="/sdcard"
#path="/data/data/com.termux/files/home"

adb="adb"

main() {
	local user="$1"
	if [ ! $user ]; then
		is_root=$(${adb} shell "ls /system/bin/su")
		if [[ $is_root == "/system/bin/su" ]]; then root; else user; fi
	elif [[ $user == "root" ]]; then
		root
	else
		termux
	fi

	expect /tmp/into_adb_shell.expect $path $user
}

install_bash() {
	version="5.2.015-1.2.3-2"

	abi=$(${adb} shell getprop ro.product.cpu.abi)
	if [ "$abi" == "arm64-v8a" ]; then
		abi="aarch64"
	elif [ "$abi" == "x86_64" ]; then
		abi="x86_64"
	fi

	if [ ! -f "/tmp/bash-linux-${abi}" ]; then
		wget https://github.com/robxu9/bash-static/releases/download/${version}/bash-linux-${abi} -O /tmp/bash-linux-${abi}
	fi

	${adb} push /tmp/bash-linux-${abi} /data/local/tmp/.bash
	${adb} shell "chmod +x /data/local/tmp/.bash"
}

termux() {
	cat <<EOF >/tmp/into_adb_shell.expect
set timeout 2
set path [lindex \$argv 0]
set user [lindex \$argv 1]
spawn ${adb} shell

expect "*$ " {send "cd \$path && echo IyEvYmluL3NoCiMg6ISa5pys5p2l5rqQOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nb2lzbmV0by80ZTBhOWM3YzhjZjZmNmZjODZmYjk2YjQ1NDM4NGM1NwpURVJNVVhfUEFDS0FHRT1jb20udGVybXV4ClRFUk1VWF9QQVRIPSRBTkRST0lEX0RBVEEvZGF0YS8kVEVSTVVYX1BBQ0tBR0UKVEVSTVVYX1RNUERJUj0kVEVSTVVYX1BBVEgvZmlsZXMvdXNyL3RtcApGTkFNRT0kVEVSTVVYX1RNUERJUi8kVEVSTVVYX1BBQ0tBR0UtJCQKU0NSSVBUPSRGTkFNRS5zaApSQ0ZJTEU9JEZOQU1FLmJhc2hyYwpFTlZGSUxFPSRGTkFNRS5lbnYKSU5JVEZJTEU9JEZOQU1FLmluaXQKVEVSTVVYX0JBU0g9JFRFUk1VWF9QQVRIL2ZpbGVzL3Vzci9iaW4vYmFzaAoKZXhwb3J0IFRFUk1VWF9QQUNLQUdFIFRFUk1VWF9QQVRIIFRFUk1VWF9UTVBESVIgU0NSSVBUIFJDRklMRSBFTlZGSUxFIElOSVRGSUxFIFRFUk1VWF9CQVNICgpydW4tYXMgJFRFUk1VWF9QQUNLQUdFIHNoIC1jICJjYXQgPiAkRU5WRklMRSIgPDxFT0YKVEVSTVVYX1BBQ0tBR0U9JFRFUk1VWF9QQUNLQUdFClRFUk1VWF9QQVRIPSRURVJNVVhfUEFUSApURVJNVVhfVUlEPSRURVJNVVhfVUlEClRFUk1VWF9BUFBfUElEPSRURVJNVVhfQVBQX1BJRApUTVBESVI9JFRFUk1VWF9UTVBESVIKU0hFTEw9JFRFUk1VWF9QQVRIL2ZpbGVzL3Vzci9iaW4vYmFzaApDT0xPUlRFUk09dHJ1ZWNvbG9yCkhJU1RDT05UUk9MPWlnbm9yZWJvdGgKUFJFRklYPSRURVJNVVhfUEFUSC9maWxlcy91c3IKVEVSTVVYX0lTX0RFQlVHR0FCTEVfQlVJTEQ9MQpURVJNVVhfVkVSU0lPTj0wLjExOC4wCkxEX1BSRUxPQUQ9JFRFUk1VWF9QQVRIL2ZpbGVzL3Vzci9saWIvbGlidGVybXV4LWV4ZWMuc28KSE9NRT0kVEVSTVVYX1BBVEgvZmlsZXMvaG9tZQpMQU5HPWVuX1VTLlVURi04ClRFUk1VWF9BUEtfUkVMRUFTRT1HSVRIVUIKVEVSTT14dGVybS0yNTZjb2xvcgpTSExWTD0xClBBVEg9JFRFUk1VWF9QQVRIL2ZpbGVzL3Vzci9iaW4KRU9GCgpydW4tYXMgJFRFUk1VWF9QQUNLQUdFIHNoIC1jICJjYXQgPiAkUkNGSUxFIiA8PEVPRgojIS8kVEVSTVVYX0JBU0gKcm0gLWYgJFJDRklMRSA+IC9kZXYvbnVsbCAyPiYxCnVuc2V0IFJDRklMRSA+IC9kZXYvbnVsbCAyPiYxCi4gJEVOVkZJTEUKaWYgW1sgIlwkKGVjaG8gXCRURVJNVVhfVUlEIHwgeGFyZ3MpIiA9PSAiIiBdXTsgdGhlbgpURVJNVVhfVUlEPVwkKGNtZCBwYWNrYWdlIGxpc3QgcGFja2FnZXMgLVUgJFRFUk1VWF9QQUNLQUdFIHwgcmV2IHwgY3V0IC1kJzonIC1mMSB8IHJldikKZmkKI2lmIFtbICJcJChlY2hvIFwkVEVSTVVYX0FQUF9QSUQgfCB4YXJncykiID09ICIiIF1dOyB0aGVuCiNURVJNVVhfQVBQX1BJRD1cJChwcyAtbyBQSUQsTkFNRSB8IGdyZXAgJFRFUk1VWF9QQUNLQUdFIHwgZ3JlcCAtdiAnOicgfCBzZWQgJ3MvICAqLyAvZycgfCBjdXQgLWQnICcgLWYyKQojZmkKLiAkSU5JVEZJTEUKcm0gLWYgJElOSVRGSUxFID4gL2Rldi9udWxsIDI+JjEKdW5zZXQgSU5JVEZJTEUgPiAvZGV2L251bGwgMj4mMQpybSAtZiAkRU5WRklMRSA+IC9kZXYvbnVsbCAyPiYxCnVuc2V0IEVOVkZJTEUgPiAvZGV2L251bGwgMj4mMQpleGVjICRURVJNVVhfQkFTSCAtbApFT0YKCnJ1bi1hcyAkVEVSTVVYX1BBQ0tBR0Ugc2ggLWMgImNhdCA+ICRJTklURklMRSIgPDxFT0YKLiAkRU5WRklMRQpybSAtZiAkU0NSSVBUID4gL2Rldi9udWxsIDI+JjEKdW5zZXQgU0NSSVBUID4gL2Rldi9udWxsIDI+JjEKJFRFUk1VWF9CQVNIIC0tcmNmaWxlICRSQ0ZJTEUKRU9GCgpydW4tYXMgJFRFUk1VWF9QQUNLQUdFIHNoIC1jICJjYXQgPiAkU0NSSVBUIiA8PEVPRgouICRJTklURklMRQpFT0YKCnJ1bi1hcyAkVEVSTVVYX1BBQ0tBR0Ugc2ggJFNDUklQVAo= | base64 -d > ./run-as-termux.sh && chmod +x ./run-as-termux.sh && ./run-as-termux.sh \n"}

expect "com.termux" {send "alias cl=clear\n"}
expect "com.termux" {send "alias ls='ls --color'\n"}
expect "com.termux" {send "alias ll='ls -lFh --color'\n"}
expect "com.termux" {send "alias du='du -sh'\n"}
expect "com.termux" {send "export TMP='/data/local/tmp'\n"}
expect "com.termux" {send "export TMPDIR='/data/data/com.termux/files/usr/tmp'\n"}
expect "com.termux" {send "export PATH='/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:/data/data/com.termux/files/home/.local/bin'\n"}

#expect "*" {send "if \[ ! -x '\$\(command -v zsh\)' \];then zsh; fi\n"}
expect "*" {send "cd&&cl&&pwd\n"}

interact
EOF

}

termux1() {
	cat <<EOF >/tmp/into_adb_shell.expect
set timeout 2
set path [lindex \$argv 0]
set user [lindex \$argv 1]
spawn ${adb} shell

expect "*$ " {send "run-as com.termux files/usr/bin/bash -li\n"}
#expect "*" {send "PS1='\$ '\n"}
expect "*" {send "export HOME=\$path\n"}
expect "*" {send "alias cl=clear\n"}
expect "*" {send "alias ls='ls --color'\n"}
expect "*" {send "alias ll='ls -lFh --color'\n"}
expect "*" {send "alias du='du -sh'\n"}

#expect "*" {send "source ./termux.sh\n"}
expect "*" {send "export SHELL='/data/data/com.termux/files/usr/bin/bash'\n"}
expect "*" {send "export PREFIX='/data/data/com.termux/files/usr'\n"}
expect "*" {send "export PWD='/data/data/com.termux/files/home'\n"}
expect "*" {send "export EXTERNAL_STORAGE='/sdcard'\n"}
expect "*" {send "export LD_PRELOAD='/data/data/com.termux/files/usr/lib/libtermux-exec.so'\n"}
expect "*" {send "export HOME='/data/data/com.termux/files/home'\n"}
expect "*" {send "export LANG='en_US.UTF-8'\n"}
expect "*" {send "export TMPDIR='/data/data/com.termux/files/usr/tmp'\n"}
expect "*" {send "export TMP='/data/local/tmp'\n"}
expect "*" {send "export ANDROID_DATA='/data'\n"}
expect "*" {send "export TERM='xterm-256color'\n"}
expect "*" {send "export SHLVL='1'\n"}
expect "*" {send "export ANDROID_ROOT='/system'\n"}
expect "*" {send "export LD_LIBRARY_PATH='/data/data/com.termux/files/usr/lib'\n"}
expect "*" {send "export PATH='/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:/data/data/com.termux/files/home/.local/bin'\n"}

expect "*" {send "export _='/data/data/com.termux/files/usr/bin/env'\n"}



#expect "*" {send "if \[ ! -x '\$\(command -v zsh\)' \];then zsh; fi\n"}
expect "*" {send "cd&&cl&&pwd\n"}

interact
EOF
}

root() {
	cat <<EOF >/tmp/into_adb_shell.expect
set timeout 2
set path [lindex \$argv 0]
set user [lindex \$argv 1]
spawn ${adb} shell

expect "*$ " {send "su \$user\n"}
expect "*# " {send "\$path/.bash\n"}
expect "*" {send "PS1='\$ '\n"}
expect "*" {send "export HOME=\$path\n"}
expect "*" {send "alias cl=clear\n"}
expect "*" {send "alias ls='ls --color'\n"}
expect "*" {send "alias ll='ls -lFh --color'\n"}
expect "*" {send "alias du='du -sh'\n"}

expect "*" {send "export SHELL='/data/data/com.termux/files/usr/bin/bash'\n"}
expect "*" {send "export PREFIX='/data/data/com.termux/files/usr'\n"}
expect "*" {send "export PWD='/data/data/com.termux/files/home'\n"}
expect "*" {send "export EXTERNAL_STORAGE='/sdcard'\n"}
expect "*" {send "export LD_PRELOAD='/data/data/com.termux/files/usr/lib/libtermux-exec.so'\n"}
expect "*" {send "export HOME='/data/data/com.termux/files/home'\n"}
expect "*" {send "export LANG='en_US.UTF-8'\n"}
expect "*" {send "export TMPDIR='/data/data/com.termux/files/usr/tmp'\n"}
expect "*" {send "export TMP='/data/local/tmp'\n"}
expect "*" {send "export ANDROID_DATA='/data'\n"}
expect "*" {send "export TERM='xterm-256color'\n"}
expect "*" {send "export SHLVL='1'\n"}
expect "*" {send "export ANDROID_ROOT='/system'\n"}
expect "*" {send "export LD_LIBRARY_PATH='/data/data/com.termux/files/usr/lib'\n"}
expect "*" {send "export PATH='/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:/data/data/com.termux/files/home/.local/bin'\n"}

expect "*" {send "if \[ ! -x '\$\(command -v zsh\)' \];then zsh; fi\n"}
expect "*" {send "cd&&cl&&pwd\n"}

interact
EOF
}

user() {
	cat <<EOF >/tmp/into_adb_shell.expect
set timeout 2
set path [lindex \$argv 0]
set user [lindex \$argv 1]
spawn ${adb} shell

expect "$ " {send "\$path/.bash\n"}
expect "$ " {send "set +o history\n"}
expect "$ " {send "PS1='\\\033\[1;37m\$ \\\033\[0m'\n"}
expect "$" {send "alias cl=clear\n"}
expect "$" {send "alias ls='ls --color'\n"}
expect "$" {send "alias ll='ls -lFh --color'\n"}
expect "$" {send "alias du='du -sh'\n"}
expect "$" {send "alias mkdir='mkdir -p'\n"}

expect "$" {send "export SHELL='\$path/.bash'\n"}
expect "$" {send "export PWD='\$path'\n"}
expect "$" {send "export EXTERNAL_STORAGE='/sdcard'\n"}
expect "$" {send "export LANG='en_US.UTF-8'\n"}
expect "$" {send "export TMP='/data/local/tmp'\n"}
expect "$" {send "export TERM='xterm-256color'\n"}
expect "$" {send "export SHLVL='1'\n"}
expect "$" {send "export ANDROID_ROOT='/system'\n"}
expect "$" {send "export HOME=\$path\n"}
expect "$" {send "export HISTCONTROL=ignoreboth\n"}
expect "$" {send "export HISTFILE=\$path/.bash_history\n"}
expect "$" {send "history -r \$path/.bash_history\n"}
expect "*" {send "cd&&cl&&pwd\n"}
expect "$" {send "set -o history\n"}

interact
EOF
}

usage() {
	echo "Usage :  $(basename "$0") [options] [--] argument-1 argument-2

  Options:
  -h, --help                  Display this message
  -d, --debug                 Debug model run
  -p, --posix                 Posix model parse shell command
  -v, --version               Display script version
  -f, --file FILE             Target file 
  -D, --directory DIRECTORY   Target directory"

}

while getopts ":hdevf:D:-:" opt; do
	case "${opt}" in
	h) usage && exit 0 ;;
	d) adb="adb -d" ;;
	e) adb="adb -e" ;;
	v)
		echo "$0 -- Version $ScriptVersion"
		exit
		;;
	f) file=${OPTARG} ;;
	D) directory=${OPTARG} ;;
	-) case "${OPTARG}" in
		help) usage && exit 0 ;;
		debug) set -x ;;
		posix) set -o posix ;;
		version)
			echo "$0 -- Version $ScriptVersion"
			exit
			;;
		file)
			file=${!OPTIND}
			OPTIND=$((OPTIND + 1))
			;;
		directory)
			directory=${!OPTIND}
			OPTIND=$((OPTIND + 1))
			;;
		*) echo "Invalid option: --${OPTARG}" >&2 && exit 1 ;;
		esac ;;
	:) echo "Option -${OPTARG} requires an argument." >&2 && exit 1 ;;
	*) echo "Invalid option: -${OPTARG}" >&2 && exit 1 ;;
	esac
done
shift $((OPTIND - 1))

${adb} get-state
if [ $? != 0 ]; then exit 1; fi
${adb} shell 'ls /data/local/tmp/.bash' || install_bash
main "$@"
