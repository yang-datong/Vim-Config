#!/bin/bash
ScriptVersion="1.0"

docker_history="$HOME/.docker_history"

unset docker_id
docker_status="stop"

case "$(uname)" in
"Darwin") docker="docker";;
"Linux") docker="sudo docker";;
*)echo "Windows has not been tested for the time being";exit 1
esac

main(){
	if [ ! $docker_id ];then
		try_fetch_docker_id
	fi
	if [ -z "$docker_id" ];then
		echo -e "\033[31m Need CONTAINER_ID\033[0m"
		local tmp=$(${docker} ps -l | sed -n 2p)
		if [ -z "$tmp" ];then
			exit
		fi
		docker_id=$(echo "$tmp" | awk '{print $1}')
		local docker_name=$(echo "$tmp" | awk '{print $2}')
		read -p " Maybe you're looking for \"$docker_id $docker_name\" ? [Y/n]" ok
		if [ "$ok" == "n" ];then
			exit
		fi
		docker_status="stop"
	fi
	if [ "$docker_status" == "running" ];then
		echo $docker_id > $docker_history
		${docker} attach $docker_id
	elif [ "$docker_status" == "stop" ];then
		echo $docker_id > $docker_history
		${docker} start $docker_id && ${docker} attach $docker_id
	else
		echo -e "\033[31m Container status error -> $docker_status \033[0m";
		exit
	fi
}



try_fetch_docker_id(){
	#Check whether exist running container in local
	local docker_count=$(${docker} ps | wc -l | sed 's/ //g')
	if [ $docker_count == 1 ];then
		unset docker_id
	elif [ $docker_count == 2 ];then
		docker_id=$(${docker} ps | sed -n 2p | awk '{print $1}')
	elif [ $docker_count -gt 2 ];then
		echo -e "\033[31m Detection multiple container,need statement container id in command argument\033[0m";exit
	fi

	#Found usable container 
	if [ -n "$docker_id" ];then
		docker_status="running"
		return
	fi

	#Check history file whether exist container id
	if [ -f $docker_history ];then
		docker_id=$(cat $docker_history)
		docker_status="stop"
	fi
}

usage (){
  echo "Usage :  $(basename "$0") [options] [--] argument-1 argument-2

  Options:
  -h, --help                  Display this message
  -d, --debug                 Debug model run
  -p, --posix                 Posix model parse shell command
  -v, --version               Display script version
  -i, --id CONTAINER_ID       Start and Attach container
  -D, --directory DIRECTORY   Target directory"

}

while getopts ":hdpvi:D:-:" opt; do
  case "${opt}" in
    h) usage && exit 0;;
    d) set -x ;;
    p) set -o posix ;;
    v) echo "$0 -- Version $ScriptVersion"; exit ;;
    i) docker_id=${OPTARG};;
    D) directory=${OPTARG};;
    -) case "${OPTARG}" in
         help) usage && exit 0;;
         debug)      set -x ;;
         posix)      set -o posix ;;
         version)    echo "$0 -- Version $ScriptVersion"; exit ;;
         id)         docker_id=${!OPTIND}; OPTIND=$((OPTIND+1));;
         directory)  directory=${!OPTIND}; OPTIND=$((OPTIND+1));;
         *)          echo "Invalid option: --${OPTARG}" >&2 && exit 1;;
       esac;;
    :) echo "Option -${OPTARG} requires an argument." >&2 && exit 1;;
    *) echo "Invalid option: -${OPTARG}" >&2 && exit 1;;
  esac
done
shift $((OPTIND-1))

main "$@"
